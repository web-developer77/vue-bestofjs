webpackJsonp([88374565155893],{576:function(e,t){e.exports={data:{allFile:{totalCount:91,edges:[{node:{relativePath:"2017/categories/css-in-js/ja.md",size:null,base:"ja.md",ext:".md",internal:{contentDigest:"d41d8cd98f00b204e9800998ecf8427e"},fields:{key:"categories.css-in-js",language:"ja",markdown:"",year:"2017"}}},{node:{relativePath:"2017/categories/graphql/ja.md",size:null,base:"ja.md",ext:".md",internal:{contentDigest:"d41d8cd98f00b204e9800998ecf8427e"},fields:{key:"categories.graphql",language:"ja",markdown:"",year:"2017"}}},{node:{relativePath:"2017/categories/vue/ja.md",size:null,base:"ja.md",ext:".md",internal:{contentDigest:"d41d8cd98f00b204e9800998ecf8427e"},fields:{key:"categories.vue",language:"ja",markdown:"",year:"2017"}}},{node:{relativePath:"2016/conclusion/en.md",size:"1627",base:"en.md",ext:".md",internal:{contentDigest:"a61b7337a569d1a7744f372d7c81cad7"},fields:{key:"conclusion",language:"en",markdown:'Despite the JavaScript fatigue™ and the dramas (remember the ["leftpad gate"](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/)), 2016 was a great year for the community, with the rise of projects like {vuejs} and {react-native}, and new projects like {yarn} or {create-react-app}.\n\nWe have been talking about projects that got traction on Github in 2016 but what really matters is developer\'s satisfaction.\nSo if you want a more qualitative approach, check the results from Sacha Greif’s [State of JavaScript](http://stateofjs.com/) survey. More than 9,000 responses were collected!\n\n---\n\nIt\'s time to think about 2017, where are the next rising stars?\n\nHere are my 10 picks of the year, the projects and the ideas I liked in 2016 and that will keep up growing in 2017:\n\n* {vuejs}: the momentum will not stop\n* {electron}\n* {create-react-app}\n* {react-native}\n* {gatsby} (used to build this page!)\n* {yarn}: a fast, reliable and secure dependency management that can replace npm, you can read about the state of node.js package managers [here](https://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/)\n* The concept of "Progressive Web Applications"\n* Node.js micro-services made easy to deploy with a hosting solution like [Now](https://zeit.co/now)\n* The evolution of {nodejs}: the latest releases support very well the ES6 syntax\n* And one more pick would be {graphql}: all my friends told me that something big is coming!\n\n---\n\nThank you for your attention, feel free to share this article or to reach us on [Github](https://github.com/michaelrambeau/risingstars2016)!\n',year:"2016"}}},{node:{relativePath:"2016/conclusion/ja.md",size:"2333",base:"ja.md",ext:".md",internal:{contentDigest:"949196c116614dce053af6d02d7df0fa"},fields:{key:"conclusion",language:"ja",markdown:'JavaScript fatigue™（"JavaScript疲れ"）がささやかれ、いくつかの悲劇（例えば、["leftpad gate"](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/)）にも遭遇しましたが、{vuejs} と {react-native} が脚光を浴び、{yarn} や {create-react-app} といった新しいプロジェクトが立ち上がり、2016年はコミュ二ティにとって実りの多い年だったといえるでしょう。\n\nここまで、2016年に Github で支持を集めたプロジェクトを定量的な視点でみてきました。とはいえ、この結果だけでデベロッパーが満足できるかどうか疑問です。もっと定性的なアプローチをお望みであれば、Sacha Greif の実施したサーヴェイ [State of JavaScript](http://stateofjs.com/) を是非チェックしてみてください。9,000 以上の回答結果にアクセスできます。\n\n---\n\nさて、2017年は何が来るのでしょうか？\n\n2016年を振り返ってみて個人的に気に入ったもののうち、2017年も引き続き伸びそうなプロジェクトとアイデアを10選してみました。\n\n* {vuejs}: しばらく勢いは止まらないでしょう。\n* {electron}\n* {create-react-app}\n* {react-native}\n* {gatsby} (このページのビルドにも使ってます！)\n* {yarn}: 高速、高信頼性、セキュアなパッケージマネージャーです。npm に取って代わる可能性もあります。こちらの記事が参考になります: ["Yarn vs npm - The State of Node.js Package Managers"](https://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/)\n* プログレッシブ Web アプリケーション\n* [Now](https://zeit.co/now) に代表されるような、デプロイが容易で Node.js ベースのマイクロサービスが構築できるホスティングサービス\n* {nodejs} の進化: 最新のリリースでは ES6 シンタックスをきちんとサポートしています。\n* あと最後に {graphql}: 周囲の評判は高く、これは来る、らしいです。\n\n---\n\n最後までお読みいただきありがとうございます。シェアは自由です。フィードバックはこちらからお願いします: [Github](https://github.com/michaelrambeau/risingstars2016)\n',year:"2016"}}},{node:{relativePath:"2016/conclusion/zh.md",size:"1757",base:"zh.md",ext:".md",internal:{contentDigest:"49f300055a923165f75b25a93d508615"},fields:{key:"conclusion",language:"zh",markdown:'虽然 2016 年出现了“JS 疲劳”，也发生了戏剧性的事件(如 ["leftpad 门"](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/))，但总体来讲 2016 年对 JS 社区来说是非常重要的一年，部分项目在 2016 年崛起，如 {vuejs} 和 {react-native}，还有些黑马项目 2016 年诞生，如 {yarn} 和 {create-react-app}。\n\n我们谈论了 2016 年 Github 上最受瞩目的开源项目，但是真正重要的是开发者的满意度，如果你想就这个话题有更量化的认识，建议去看看 Sacha Greif 的调查 [State of JavaScript](http://stateofjs.com/)，该调查收集了超过 9000 份问卷。\n\n---\n\n接下来该思考 2017 年了，哪些将会持续获得开发者的青睐？哪些会成为新星呢？ 下面是我精选的 10 个我 2016 年比较欣赏，并且 2017 年会继续保持增长的项目或创意：\n\n* {vuejs}：还在快速增长阶段\n* {electron}\n* {create-react-app}\n* {react-native}\n* {gatsby} (你浏览的这个页面就是用它来构建的)\n* {yarn}：快速、可靠并且安全的依赖管理工具，可以直接替代 npm，建议阅读文章 [yarn vs npm](https://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/)\n* PWA（Progressive Web Applications）渐进式 WEB 应用\n* Node.js 微服务的一站式部署和运行解决方案，比如 [Now](https://zeit.co/now)\n* {nodejs} 的进化：最新版本对 ES6 语法的支持已经非常好了\n* 最后是 {graphql}：我身边不少朋友说这会是一个大的进步\n\n---\n\n感谢你花时间阅读本文，可以尽情把本文分享出去，有疑问可以到 [Github](https://github.com/michaelrambeau/risingstars2016) 上发起 Issue 或直接联系我们。\n',year:"2016"}}},{node:{relativePath:"2016/introduction/en.md",size:"531",base:"en.md",ext:".md",internal:{contentDigest:"1aa27e07c10537a13b017e6fb3cd1c4c"},fields:{key:"introduction",language:"en",markdown:"The JavaScript community is going full speed on innovation, what was once trendy becomes old-fashioned a few months later.\n\n2016 is over, you may think you missed something important?\nDon't worry, we are going to review what were the main trends.\n\nLet's see **by the numbers** which projects got traction in 2016, by comparing the numbers of stars **added** on Github, over the last 12 months.\n\nIn 2015, {react} was the king and {redux} won by storm the battle of {flux} implementations.\nWho are the 2016 JavaScript rising stars ?\n",year:"2016"}}},{node:{relativePath:"2016/introduction/ja.md",size:"818",base:"ja.md",ext:".md",internal:{contentDigest:"81207bcc85f6b85b50fe725026b6b858"},fields:{key:"introduction",language:"ja",markdown:"JavaScriptコミュニティは日々進化しています。今日のトレンドも数か月後には陳腐化しているなんてことは日常茶飯事です。\n\n2016年は終わってしまいましたが、何か重要なことを見逃したのではないかと感じているそこのあなた！ 2016年の主要なトレンドをおさらいして、そんな不安を払拭しちゃいましょう。\n\n過去12か月に獲得された Github のスター数を比較して、2016年に支持を集めたプロジェクトを**数値**に基づいて評価していきます。\n\n2015年はなんといっても {react} でした。そして、{flux} 実装を席巻したのは {redux} でしたね。 2016年、JavaScript の人気プロジェクトはどのようなものだったのでしょうか？\n",year:"2016"}}},{node:{relativePath:"2016/introduction/zh.md",size:"616",base:"zh.md",ext:".md",internal:{contentDigest:"5c6159b9b7988f12c627bc01bb2b6dfd"},fields:{key:"introduction",language:"zh",markdown:"近几年 JS 社区创新和演化的速度是有目共睹的，几个月前比较时髦的技术很可能现在已经过时了。\n\n2016 已经过去，你有没有担心错过了什么重要的内容？在这篇调查报告中我们会为你解读社区的主流趋势。\n\n我们将从**数量**上来分析哪些项目 2016 年获得比较多的关注，具体的做法是比较各项目 2016 年在 Github 上新增 `star` 的数量。\n\n回顾 2015 年：{react} 无疑占据了统治地位，而 {redux} 则在众多牛毛的 {flux} 实现中脱颖而出。那么 2016 年哪些项目最受开发者关注呢？\n",year:"2016"}}},{node:{relativePath:"2017/conclusion/en.md",size:"5520",base:"en.md",ext:".md",internal:{contentDigest:"8d958ec7452c92b7827bd98985c57112"},fields:{key:"conclusion",language:"en",markdown:'Let\'s finish this 2017 roundup by picking the stories of the year...\n\n### The Facebook license drama\n\n2016 drama was the ["Leftpad Gate"](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/), when a lot of projects "break" after a popular module was removed from NPM.\n\nIn 2017, we talked a lot about the fact that Facebook used to protect some of its more popular open source projects, including {react} and {flow}, with a unique license called "BSD + Parents" that was saying, very roughly, that if you pursue Facebook or one of its affiliates, you will lose the right to use React.\n\nActually the problem was not new, back to October 2016, [a lawyer analyzed the Facebook license](https://www.elcaminolegal.com/single-post/2016/10/04/Facebook-Reactjs-License), concluding that React is **not** open source.\n\nIt led to strong reactions against the React ecosystem from some developers. Many people were worried, thinking it could be a good reason to ditch React in a company (especially in a big company!).\n\nFirst Facebook reacted by explaining on their [official blog](https://code.facebook.com/posts/112130496157735/explaining-react-s-license/) how the "BSD + Parents" helps them contribute to open source.\n\nLast September, the concerns were so loud that Facebook addressed the problem and changed several licenses to MIT.\n\nFirst by [Relicensing React, Jest, Flow, and Immutable.js](https://code.facebook.com/posts/300798627056246).\n\nLater it was [GraphQL specification turn](https://medium.com/@leeb/relicensing-the-graphql-specification-e7d07a52301b).\n\nThis story story denotes how much Facebook became one of the main actors of the JavaScript scene over the last years.\n\nWe already mentioned {react}, {react-native}, {flow} and {jest} projects, all from Facebook.\nWe could also mention {reason}, a new object-functional programming language that compiles to JavaScript, as explained in the [What is ReasonML?](http://2ality.com/2017/11/about-reasonml.html) article from Dr. Axel Rauschmayer.\n\n### Web Assembly: the next revolution?\n\nOver the years, the web browser became an ubiquitous tool with a lot of capabilities: it can play audio or video, performs heavy calculations in the background using Service Workers.\n\nBut one of the oldest and hardest obstacles to progress is the performance of the JavaScript programming language itself.\n\nWeb Assembly is a new web standard that optimizes things so that code can be read and executed faster.\n\nAs Lin Clark explains in this [Cartoon Introduction](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/), WebAssembly is a way of taking code written in programming languages other than JavaScript and running that code in the browser.\n\nTo add Web Assembly to your web page, you need to compile it into a `.wasm` file.\nAnd then you will have to load this `.wasm` in the browser and it will run super-fast!\n\nIn August, Sean Lark announced that {webpack} project was [awarded $125,000 By Mozilla](https://medium.com/webpack/webpack-awarded-125-000-from-moss-program-f63eeaaf4e15) implement first-class support for WebAssembly.\n\nMozilla Firefox, Google Chrome, Apple Safari, and Microsoft Edge all provide support for WebAssembly in their most recent versions.\n\n[High-Performance Applications in Your Browser](https://spectrum.ieee.org/computing/software/webassembly-will-finally-let-you-run-highperformance-applications-in-your-browser) is really promising, will it be the next revolution?\n\n## Node.js growing up\n\n{nodejs} keeps evolving at a fast pace. The biggest change is the adoption, since the release 7.6 of the [`async await` pattern](https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9).\nThis pattern makes asynchronous code easier to read and to write: no more callback, no more promise chain.\n\nIt can make easier the onboarding of backend developers coming from other backgrounds.\n\nIt\'s good to know that, under the hood, this pattern uses the `Promise` specification.\n\nThe `async await` pattern comes from the ECMAScript 2017 specification. Node.js made a lot of progress to include natively a lot of these modern features, a compiler like {babel} is no more needed to write modern JavaScript backend code.\n\nThe next step coming soon is the adoption of [ES6 modules](http://2ality.com/2014/09/es6-modules-final.html).\n\nThe point number 2 showing Node.js maturity is {npm}, the Node.js Package Manager\n\nIn 2016, {yarn} emerged as one of the _Rising Stars_ of 2016 (the project number 3 overall). It was an attempt from Facebook to fix some of the npm flaws by:\n\n* Improving install performance\n* Making install results more predictable, using a file that locks the exact version of all installed packages.\n\n{yarn} is so popular that a lot of project documentation pages explain that you can start the installation process using either `npm install` or `yarn add` command.\n\nBut {npm} made a lot of progresses since the release of the version 5, addressing the two issues mentioned above and making {yarn} less relevant than before.\n\nAmong other improvements, we could also mention `npx` a tool that lets developers run locally installed packages easily, as explained here: [Introducing npx: an npm package runner](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n\n---\n\nThank you for your attention, feel free to share this article or to reach us on [Github](https://github.com/bestofjs/javascriptrisingstars)!\n',year:"2017"}}},{node:{relativePath:"2017/conclusion/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"conclusion",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/introduction/en.md",size:"283",base:"en.md",ext:".md",internal:{contentDigest:"39ee9092635983b6958a3244594aa6af"},fields:{key:"introduction",language:"en",markdown:"As we did [last year](/2016/en), it's time to look back at the JavaScript landscape in 2017.\n\nLet's see by the numbers which projects got traction in 2017 by comparing the numbers of stars added on GitHub over the last 12 months, and find out who are 2017's JavaScript Rising Stars.\n",year:"2017"}}},{node:{relativePath:"2017/conclusion/zh.md",size:"10728",base:"zh.md",ext:".md",internal:{contentDigest:"af021885de87522dbb3c6b9bc1c42f57"},fields:{key:"conclusion",language:"zh",markdown:'Let\'s finish this 2017 roundup by picking the stories of the year...\n\n让我们挑选关键事件来结束2017年的回顾。\n\n### The Facebook license drama\n### Facebook许可协议事件\n\n2016 drama was the ["Leftpad Gate"](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/), when a lot of projects "break" after a popular module was removed from NPM.\n\n2016的["Leftpad门"](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/)事件删除了NPM里许多常用的包, 一度让当时许多项目“中断”了。\n\nIn 2017, we talked a lot about the fact that Facebook used to protect some of its more popular open source projects, including {react} and {flow}, with a unique license called "BSD + Parents" that was saying, very roughly, that if you pursue Facebook or one of its affiliates, you will lose the right to use React.\n\n在2017年, 我们讨论了诸多Facebook为了保护自己开源项目的因素， 其中有{react}和 {flow}, 用了一种叫“BSD+Parents”的独特许可协议。大致意思是一旦被许可人对Facebook及其子公司甚至关联公司提出直接的或间接专利诉讼，该协议授予用户的专利权利（使用React）即刻自动终止。\n\n\nActually the problem was not new, back to October 2016, [a lawyer analyzed the Facebook license](https://www.elcaminolegal.com/single-post/2016/10/04/Facebook-Reactjs-License), concluding that React is **not** open source.\n\n事实上这不是一个新闻, 回到2016十月, [一位律师分析Facebook的许可协议](https://www.elcaminolegal.com/single-post/2016/10/04/Facebook-Reactjs-License)就已经给出了React**不是**开源项目的结论。\n\nIt led to strong reactions against the React ecosystem from some developers. Many people were worried, thinking it could be a good reason to ditch React in a company (especially in a big company!).\n\n这让一些开发者开始了对React生态圈强烈抵制。许多人也为此担心，这会成为公司丢弃React的一个好借口（尤其在大公司）。\n\nFirst Facebook reacted by explaining on their [official blog](https://code.facebook.com/posts/112130496157735/explaining-react-s-license/) how the "BSD + Parents" helps them contribute to open source.\n\n首先Facebook在[官方博客](https://code.facebook.com/posts/112130496157735/explaining-react-s-license/)上解释了"BSD + Parents"协议是如何帮助他们为开源事业做贡献的。\n\nLast September, the concerns were so loud that Facebook addressed the problem and changed several licenses to MIT.\n\n接着在去年9月份，迫于强大的压力Facebook最终把协议变成了MIT来彻底解决这个问题。\n\nFirst by [Relicensing React, Jest, Flow, and Immutable.js](https://code.facebook.com/posts/300798627056246).\n\n先是[Relicensing React, Jest, Flow, and Immutable.js](https://code.facebook.com/posts/300798627056246)修改了协议。\n\nLater it was [GraphQL specification turn](https://medium.com/@leeb/relicensing-the-graphql-specification-e7d07a52301b).\n\n接下来是 [GraphQL specification turn](https://medium.com/@leeb/relicensing-the-graphql-specification-e7d07a52301b)也该了协议。\n\n\nThis story story denotes how much Facebook became one of the main actors of the JavaScript scene over the last years.\n\n从这件事中也可以看出Facebook近些年已在JavaScript领域中占据了举足轻重的地位。\n\nWe already mentioned {react}, {react-native}, {flow} and {jest} projects, all from Facebook.\n\n我们已说过{react}, {react-native}, {flow} 和 {jest} 项目皆来自Facebook。\n\nWe could also mention {reason}, a new object-functional programming language that compiles to JavaScript, as explained in the [What is ReasonML?](http://2ality.com/2017/11/about-reasonml.html) article from Dr. Axel Rauschmayer.\n\n我们也可以关注{reason}, 这是一门编译到JavaScript的对象-函数式编程语言(object-functional programming language), 详情可以阅读Dr. Axel Rauschmayer的文章[什么是ReasonML?](http://2ality.com/2017/11/about-reasonml.html) \n\n\n### Web Assembly: the next revolution?\n### Web Assembly: 接下来的革命？\n\nOver the years, the web browser became an ubiquitous tool with a lot of capabilities: it can play audio or video, performs heavy calculations in the background using Service Workers.\n\n经过多年的发展，网络浏览器己在不少领域成为通用工具：它能播放音频或视频，在后台服务器端进行密集计算的工作。\n\nBut one of the oldest and hardest obstacles to progress is the performance of the JavaScript programming language itself.\n\n但JavaScript本身有一个历史已久的难点：性能。\n\nWeb Assembly is a new web standard that optimizes things so that code can be read and executed faster.\n\nWeb Assembly是一个新的网络标准，它能优化代码的读取和执行速度。\n\n\nAs Lin Clark explains in this [Cartoon Introduction](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/), WebAssembly is a way of taking code written in programming languages other than JavaScript and running that code in the browser.\n\n正如Lin Clark在[Cartoon Introduction](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/)的解释, WebAssembly是能在浏览器里不写JavaScript，而能使用其它编程语言的一种方法。\n\nTo add Web Assembly to your web page, you need to compile it into a `.wasm` file.\nAnd then you will have to load this `.wasm` in the browser and it will run super-fast!\n\n想要在网页中使用Web Assembly，你需要编译成一个`.wasm`文件。\n然后在浏览器中加载这个`.wasm`，你便会发现它能运行得飞快！\n\n\nIn August, Sean Lark announced that {webpack} project was [awarded $125,000 By Mozilla](https://medium.com/webpack/webpack-awarded-125-000-from-moss-program-f63eeaaf4e15) implement first-class support for WebAssembly.\n\n在八月份, Sean Lark宣布{webpack}项目得到了Mozilla项目125，000美元[awarded $125,000 By Mozilla](https://medium.com/webpack/webpack-awarded-125-000-from-moss-program-f63eeaaf4e15)的赞助来实现对WebAssembly头等支持。\n\nMozilla Firefox, Google Chrome, Apple Safari, and Microsoft Edge all provide support for WebAssembly in their most recent versions.\n\nMozilla Firefox, Google Chrome, Apple Safari, 和Microsoft Edge都表示会在最近的版本中对WebAssembly支持。\n\n[High-Performance Applications in Your Browser](https://spectrum.ieee.org/computing/software/webassembly-will-finally-let-you-run-highperformance-applications-in-your-browser) is really promising, will it be the next revolution?\n\n[在你的浏览器中运行高性能的应用](https://spectrum.ieee.org/computing/software/webassembly-will-finally-let-you-run-highperformance-applications-in-your-browser)，看了后期待满满，它真的会是下一个革命？\n\n## Node.js growing up\n## 仍在快速成长的Node.js\n\n{nodejs} keeps evolving at a fast pace. The biggest change is the adoption, since the release 7.6 of the [`async await` pattern](https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9).\nThis pattern makes asynchronous code easier to read and to write: no more callback, no more promise chain.\n\n{nodejs}继续保持了快速前进的步伐。最大的变化是易用性上，7.6版本加入了[`async await` 模式](https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9)。\n这个模式可以让异步的代码容易阅读和书写：不再需要回调，不再需要promise链。\n\n\nIt can make easier the onboarding of backend developers coming from other backgrounds.\n\n这让那些后台开发转过来的开发者能更容易上手。\n\nIt\'s good to know that, under the hood, this pattern uses the `Promise` specification.\n\n值得注意的是，从底层原理上来讲，这个模式其实是使用了`Promise` 规范。\n\nThe `async await` pattern comes from the ECMAScript 2017 specification. Node.js made a lot of progress to include natively a lot of these modern features, a compiler like {babel} is no more needed to write modern JavaScript backend code。\n\n`async await` 模式来自ECMAScript 2017规范。Node.js做了非常大的努力来导入这些新特性，所以在写后端代码时，像{babel}这样的编译器已经不再是必要的了。\n\nThe next step coming soon is the adoption of [ES6 modules](http://2ality.com/2014/09/es6-modules-final.html).\n\n下一步将是[ES6 modules]模块的采用。\n\n\nThe point number 2 showing Node.js maturity is {npm}, the Node.js Package Manager\n\n第二点变化是Node.js的包管理{npm}也更加成熟了。\n\nIn 2016, {yarn} emerged as one of the _Rising Stars_ of 2016 (the project number 3 overall). It was an attempt from Facebook to fix some of the npm flaws by:\n\n在2016年，{yarn}一鸣惊人地出现在了2016年_明星项目_榜单中(排名第3)。Facebook做了如下工作去试图填补npm的缺陷：\n\n* Improving install performance\n* 改进安装时的性能\n* Making install results more predictable, using a file that locks the exact version of all installed packages.\n* 通过锁住己安装包的版本号来让结果更加可以预测。\n\n{yarn} is so popular that a lot of project documentation pages explain that you can start the installation process using either `npm install` or `yarn add` command.\n\n广受欢迎的{yarn}甚至让许多项目在自己的文档中提到你可以同时使用 `npm install` 或 `yarn add` 命令来进行安装.\n\nBut {npm} made a lot of progresses since the release of the version 5, addressing the two issues mentioned above and making {yarn} less relevant than before.\n\n不过{npm}在第5个版本中进行了大量的改进，解决了上面提到的两个问题，使得{yarn}不再具有这方面的优势。\n\nAmong other improvements, we could also mention `npx` a tool that lets developers run locally installed packages easily, as explained here: [Introducing npx: an npm package runner](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n\n在其中诸多改进中, 我们也要提及`npx`这个工具， 它可以让开发者更容易地在本地运行已经安装的包, 这里有注解: [Introducing npx: an npm package runner](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n\n---\n\nThank you for your attention, feel free to share this article or to reach us on [Github](https://github.com/bestofjs/javascriptrisingstars)!\n感谢你的阅读, 请自由分享此篇文章或者在[Github](https://github.com/bestofjs/javascriptrisingstars)上联系我们!\n',year:"2017"}}},{node:{relativePath:"2017/introduction/fr.md",size:"248",base:"fr.md",ext:".md",internal:{contentDigest:"c90c8185a8103b3cf927d6ebe5fa239b"},fields:{key:"introduction",language:"fr",markdown:"L'année 2017 s'est terminée avec une nouvelle fois beaucoup de changements dans la planète JavaScript.\n\nIl est temps de revenir sur les tendances et les grandes histoires de l'année.\n\nQuelles sont les étoiles filantes JavaScript de l'année ?\n",year:"2017"}}},{node:{relativePath:"2017/introduction/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"introduction",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/introduction/zh.md",size:"304",base:"zh.md",ext:".md",internal:{contentDigest:"c2def128cd67e267afa9dc8a15210f05"},fields:{key:"introduction",language:"zh",markdown:"正如[去年](/2016/en)一样, 是时候让我们来回顾2017年间JavaScript领域的变化与发展了。\n\n我们通过对比各项目于过去12个月在Github上新增Star数量的方式，来评估其在2017年度的受关注程度，进而选出2017年度JavaScript领域崛起的明星项目。\n",year:"2017"}}},{node:{relativePath:"2016/categories/all/en.md",size:"1457",base:"en.md",ext:".md",internal:{contentDigest:"01f3f3748c451793e90331c32259049e"},fields:{key:"categories.all",language:"en",markdown:"### Overview\n\nBy checking the 10 hottest projects of the year, you can get a good overview of what was the web development landscape in 2016, since you will find:\n\n* 3 UI frameworks: {vuejs}, {react} and {angular-2}\n* A new node.js package manager: {yarn}\n* The leading solution to build desktop applications: {electron}\n* A solution to quicky start a new React project {create-react-app}\n* A mobile framework: {react-native}\n* The most famous CSS toolkit: {bootstrap}\n* A state management library based on functional concepts: {redux}\n* A powerful and flexible chart library: {d3}\n\nIt tells a lot about JavaScript ubiquity and versatility in 2016.\n\n### And the 2016 winner is... 🏆\n\n{vuejs} project got more than 25,000 stars on Github last year, it means 72 stars per day, it's more than what any other framework got, including React and Angular.\n\nThe [version 2](https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.lekly4sa8), that takes advantage of the Virtual DOM for performance, was released in October.\n\n{vuejs} is used in production by big companies (including Alibaba, the biggest e-commerce company in China), so you can consider it as a safe choice.\n\nThere is already a quite mature eco-system around it, including a router ({vue-router}) and a state management library ({vuex}).\n\nIt seems that {vuejs} took the best of {react} (the component approach) and {angular-1} (templates are html code enhanced by the framework features).\n",year:"2016"}}},{node:{relativePath:"2016/categories/all/ja.md",size:"1853",base:"ja.md",ext:".md",internal:{contentDigest:"f9d8634e2bb572f71047b33b01459164"},fields:{key:"categories.all",language:"ja",markdown:"### まとめ\n\n2016年のトップ10にランキングしたプロジェクトをみれば、その年のWeb開発の動向がよく見て取れます。\n\n* UIフレームワーク御三家: {vuejs}, {react}, {angular-2}\n* Node.jsの新パッケージマネージャー: {yarn}\n* デスクトップアプリ作るなら: {electron}\n* Reactプロジェクトを爆速スキャッフォルド: {create-react-app}\n* モバイル向けアプリのフレームワークといえば: {react-native}\n* もはや知らなきゃもぐりなCSSツールキット: {bootstrap}\n* 関数型のコンセプトをベースにした状態管理ライブラリ: {redux}\n* パワフルで柔軟なチャートライブラリ: {d3}\n\nこうしてみると、JavaScriptがいかに様々な分野で汎用的に利用されているのかがわかります。\n\n### 2016年 最優秀賞 🏆\n\n{vuejs} プロジェクトはGithubで年間25,000以上のスターを獲得しました。日に換算すると72スターほどになります。これはReactとAngularを含めた他のフレームワークと比較しても優位な数字です。\n\n2016年10月にリリースされた[ヴァージョン2](https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.lekly4sa8)では, Virtual DOMが採用されパフォーマンスが飛躍的に向上しました。\n\n{vuejs} は大企業での採用実績もあり（中国最大のEコマース企業であるアリババなど）、現時点で無難な選択肢と言えるでしょう。\nすでに成熟したエコシステムがあり、ルーターの {vue-router} や状態管理ライブラリ {vuex} が利用できます。\n\nつまるところ {vuejs} は、{react} のコンポーネントアプローチと {angular-1} 特有のテンプレート実装との、良いとこ取りな感じでしょうか。\n",year:"2016"}}},{node:{relativePath:"2016/categories/all/zh.md",size:"1451",base:"zh.md",ext:".md",internal:{contentDigest:"92f3b4fb8b4eedaf45cb24e7145d34ae"},fields:{key:"categories.all",language:"zh",markdown:"### 概览\n\n仔细观察 2016 年排名前 10 的项目，你就能对 WEB 社区的演化方向有个直观的把握，概括如下：\n\n* 3 个 UI 框架：{vuejs}, {react} and {angular-2}\n* 1 个新的 Node.js 包管理器：{yarn}\n* 创建桌面应用的首选：{electron}\n* 创建 react 新项目的首选：{create-react-app}\n* 1 个移动开发框架：{react-native}\n* 最受欢迎的 CSS 工具箱：{bootstrap}\n* 函数式编程风格的状态管理库：{redux}\n* 强大兼具灵活的绘图库：{d3}\n\n上面这些项目覆盖的领域，无疑证明了 JS 的通用性，印证了那句话：**能被 JS 编写的，迟早都会被 JS 编写**。\n\n### 2016 年的胜出项目是... 🏆\n\n{vuejs} 2016 年新增超过 25000 个 star，意味着平均每天新增 72 个 star，超过了所有同类项目的流行速度，比如 React 和 Angular。 采用 Virtual DOM 来增强性能的 [Vue.JS v2](https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.lekly4sa8) 于 2016 年 10 月发布。\n\n{vuejs} 已经被不少大公司用在了生产环境中，比如中国最大的电子商务网站阿里巴巴，所以你可以将 {vuejs} 作为一个安全的选择。\n\n围绕着 {vuejs} 的社区生态也日趋成熟，包括路由库（{vue-router}）和状态管理库（{vuex}）。{vuejs} 兼具了 {react} 和 {angular-1} 两者的优点，其中 {react} 的基本思想是组件式开发，而 {angular-1} 是模板增强。\n",year:"2016"}}},{node:{relativePath:"2016/categories/build/en.md",size:"1595",base:"en.md",ext:".md",internal:{contentDigest:"524d546c92a3aedaae87309043242b07"},fields:{key:"categories.build",language:"en",markdown:"In 2016, it's difficult to imagine a web application without any kind of building process.\nYou usually need a building process to compile templates and optimize assets in order to ship your web application in production.\n\n#### {webpack}\n\n{webpack} is the main tool used to build a single-page application, it plays well with the React eco-system. The newly released version 2 comes with some promising enhancements (check this [introduction](https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783#.7wyiawc0o))\n\n#### {gulp}\n\n{gulp} is a generic a task runner that can be used for any kind of automatic process involving the file system, so it's not a direct contender of Webpack or Browserify.\n\nLike {grunt}, Gulp works by aggregation: you can ask it to minify and concatenate a list of assets but it does not deal with modular JavaScript by itself, as {webpack} or {browserify} do.\n\nNevertheless it can play well with webpack even if developers tend to use npm scripts instead.\n\n#### {browserify}\n\n{browserify}, because of its simplicity is usually loved by node.js developers.\n\nBasically it takes several node.js packages as an input and generates one single \"build\" file for the browser as an output. But it seems that a more opinionated tool like {webpack} is a a better fit to web application workflows.\n\n#### Looking forward...\n\nA module bundler to follow in 2017, that emphasizes on performance: {rollup}.\n\nIt uses ES6 modules with a feature called *Tree shaking* to create bundles that include only functions you use in your code, instead of shipping the full library.\n",year:"2016"}}},{node:{relativePath:"2016/categories/build/ja.md",size:"2511",base:"ja.md",ext:".md",internal:{contentDigest:"786ed495d5757314d8c71e171d3397ff"},fields:{key:"categories.build",language:"ja",markdown:'ビルディングプロセスのないWebアプリケーション開発など、2016年の時点で想像することはもはや困難です。みなさんも、アプリケーションをプロダクションにリリースするとき、テンプレートをコンパイルしたりアセットを最適化するビルディングプロセスを踏んでいるはずですよね。\n\n#### {webpack}\n\n{webpack} はシングルページアプリケーション（SPA）のビルドツールの代表格で、React との相性も抜群です。最新版である version 2 では注目すべき機能がいくつか追加されています。version 2 については[こちら](https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783#.7wyiawc0o)がよくまとまっています。\n\n#### {gulp}\n\n{gulp} は、ファイルシステムだろうとなんだろうとプロセスを自動化するのに汎用的に利用できるタスクランナーです。ですので、Webpack や Browserify と直接競合するものではないでしょう。\n\n{grunt} 同様、Gulp が実行するのはアグリゲーションです。つまり、アセットの集まりを小さくして、つなぎ合わせるところまでするのですが、{webpack} や {browserify} のようにJavaScriptのモジュール管理までは対応していません。\n\nとはいえ、npm-scriptsを使うくらいならGulpとwebpackを使うべきでしょう。\n\n#### {browserify}\n\n{browserify} の人気はそのシンプルさにあり、それが Node.js デベロッパーに支持されています。\n\n基本的な使い方としては、複数のNode.jsパッケージを入力して、"build"というブラウザで実行可能なファイルを出力します。シンプルさが売りではありますが、Webアプリケーションの開発フローには {webpack} のような世界観を前面に打ち出すツールのほうがフィットする気がします。\n\n#### さて、今年の注目は？\n\n2017年に注目すべきモジュール管理ツールとしては、パフォーマンスの高さをうたう {rollup} を挙げておきます。\n\n*Tree shaking*と呼ばれるES6モジュールの機能を使い、コードから実際には呼ばれていない関数を取り除いてモジュールバンドルを作ってくれるので、依存関係にあるライブラリがまるごとプロダクションにデプロイされるなんてことがなくなります。\n',year:"2016"}}},{node:{relativePath:"2016/categories/build/zh.md",size:"1699",base:"zh.md",ext:".md",internal:{contentDigest:"259643cfd3c8bb05a040bd5dde4ea86a"},fields:{key:"categories.build",language:"zh",markdown:"2016 年“构建过程”似乎成了 WEB 项目的标配，如果一个 WEB 应用没有构建过程是难以想象的事情，在构建过程中通常你需要做编译模板、静态资源合并压缩之类的事情，以为生产环境做好准备。\n\n#### {webpack}\n\n{webpack} 是构建单页应用（SPA）的主要工具，它和 React 生态结合的非常好，最新发布的 Webpack 2 带来了不少非常有前景的改进，具体可以阅读[这里](https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783#.7wyiawc0o)。\n\n#### {gulp}\n\n{gulp} 是一个通用的任务运行工具，可以在任何和文件系统打交道的自动化流程中使用，可以认为它并不是 {webpack} 和 {browserify} 的直接竞争者。\n\n和 {grunt} 类似，Gulp 的主要角色是任务管理，你可以让它压缩合并代码，但是它不会帮你处理 JS 模块化问题，而 {webpack} 和 {browserify} 是可以的。\n\n当然了，Gulp 可以和 Webpack 结合起来使用，即使开发者倾向于使用 npm script 也是可以的，实际上很多开发者就是这么做的。\n\n#### {browserify}\n\n{browserify} 因为非常简单，在 Node.js 工程师群体中比较受欢迎。简单来说，它把多个 Node.js 的包作为输入，然后输出单个编译后的文件。相比而言，{webpack} 在 WEB 应用打包方面考量更多，更适合现代的 WEB 开发工作流。\n\n#### 展望未来...\n\n2017 年需要留意的模块打包工具是 {rollup}，它强调的是性能，基于 ES6 的模块规范，并且支持 **Tree Shaking** 这种黑科技，构建产生的结果只包含实际业务逻辑用到的代码，而不是简单的文件合并。\n",year:"2016"}}},{node:{relativePath:"2016/categories/compiler/en.md",size:"1994",base:"en.md",ext:".md",internal:{contentDigest:"e782ad292273bc39ca3868b60c976f9d"},fields:{key:"categories.compiler",language:"en",markdown:'We are talking here about compilers (or "transpilers") that generate JavaScript from any language (or any variation of JavaScript).\nThey transform the code into "standard JavaScript" code that the browser (or node.js) can execute.\n\nFor example compilers let developers write code using the latest version of JavaScript (ES6) without having to worry about browser support.\n\n#### {typescript}\n\nThe most trendy transpiler was {typescript}, it brings to web developers the static types used by Java and C# developers.\nThe fact that {angular-2} uses TypeScript added even more traction.\nThere are pros and cons about using types in JavaScript, read these 2 article to make your own point of view:\n* [You Might Not Need TypeScript](https://medium.com/javascript-scene/you-might-not-need-typescript-or-static-types-aa7cb670a77b#.1pn05vlis)\n* [TypeScript: the missing introduction](https://toddmotto.com/typescript-the-missing-introduction)\n\n#### {babel}\n\n{babel}, along with Webpack, almost became a standard to compile ES6 code and templates used by libraries like React (JSX) in standard JavaScript. Initially created to compile ES6, it became a much more generic tool that can accomplish any code transformation, thanks to a system of plugins.\n\n#### {flow}\n\n{flow} is not a compiler, it\'s a static type checker used to "annotate" the JavaScript code.\nBasically using Flow inside a code base means adding comments to describe expected types (read more about using Flow to write modules [here](http://javascriptplayground.com/blog/2017/01/npm-flowjs-javascript/)).\n\nIt\'s used inside the code source of Facebook projects. Since Facebook became one of the major actors of the open source world (with projects like {react}, {react-native}, {flux}, {immutable}, {jest}...), that means a lot.\n\n#### {coffeescript}\n\nDuring years {coffeescript} and its lean syntax, inspired by Python and Ruby syntax, was the most popular compiler but a lot of developers moved from CoffeeScript to ES6 with Babel in 2016.\n',
year:"2016"}}},{node:{relativePath:"2016/categories/compiler/ja.md",size:"2523",base:"ja.md",ext:".md",internal:{contentDigest:"1e4564e6b99abe9d425a97ed7521ce58"},fields:{key:"categories.compiler",language:"ja",markdown:'AltJS 群などの言語から JavaScript のコードを生成するコンパイラ（トランスパイラ）についてです。\nそれらのコンパイラはブラウザや node.js で実行できる "standard JavaScript" を生成することができるため、\nブラウザがサポートしているかどうかを気にせず、ES6などの最新の JavaScript でコードを書くことができます。\n\n#### {typescript}\n\n最も流行っていたトランスパイラーは {typescript} で、 Web の開発者が Java や C# のような静的型付けで実装できるようになりました。\n実際 {angular-2} は本体やサンプルコードが TypeScript で書かれており、その普及に貢献しました。\n\nJavascript で型を利用するのにはメリットとデメリットがあり、下記の２つの記事に目を通して採用するかどうかの判断材料にしてください。\n\n\n* [You Might Not Need TypeScript](https://medium.com/javascript-scene/you-might-not-need-typescript-or-static-types-aa7cb670a77b#.1pn05vlis)\n\n* [TypeScript: the missing introduction](https://toddmotto.com/typescript-the-missing-introduction)\n\n#### {babel}\n\n{babel} は、よく Webpack と共に利用され、ES6 で書かれたコードや standard JavaScript で書かれた React (JSX) などのライブラリのテンプレートをコンパイルする際のほぼ標準となっています。\n\n初期の頃は ES6 をコンパイルするためによく利用されていましたが、Plugin 形式で様々なコードを変換できることから、より一般的なツールになりました。\n\n\n#### {flow}\n\n{flow} はコンパイラではありませんが、処理を解析して型を推測したりコメントに書いた期待する型を元にチェックする静的な型チェッカーです。（Flow の使い方に関しては [こちら](http://javascriptplayground.com/blog/2017/01/npm-flowjs-javascript/)）。\n\n\n元は Facebook の内部プロジェクトで使われていました。{react}, {react-native}, {flux}, {immutable}, {jest} など、Facebook がオープンソースの世界で貢献しているものは多いです。\n\n\n#### {coffeescript}\n\nPython と Ruby のシンタックスにインスパイアされた {coffeescript} はここ数年最も人気なコンパイラでしたが、2016年では下火となり大半の開発者は CoffeeScript から Babel を使って ES6 を書くスタイルへと移行していきました。\n',year:"2016"}}},{node:{relativePath:"2016/categories/compiler/zh.md",size:"1990",base:"zh.md",ext:".md",internal:{contentDigest:"ef27a7048997a85dbce25ba58c810420"},fields:{key:"categories.compiler",language:"zh",markdown:"我们这里讨论的是把其他语言或者 JS 变体编译（Compiler）或转换成（Transpiler）标准 JS 代码的工具，这些工具生产出来的代码可以在浏览器或者 Node.js 环境中执行。\n\n最常见的场景是，这类编译工具能够让开发者使用 ES6 语法编写代码，而不用担心浏览器支持情况。\n\n#### {typescript}\n\n最具潜力的编译工具可能是 {typescript} 了，它为 JS 带来了类似于 Java 和 C# 的静态类型，而 {angular-2} 完全使用 TypeScript 的事实让他看起来更诱人，当然关于在 JS 使用静态类型的讨论有很多，建议阅读下面这两篇文章来做出自己的决定：\n* [你可能不需要 TypeScript](https://medium.com/javascript-scene/you-might-not-need-typescript-or-static-types-aa7cb670a77b#.1pn05vlis)\n* [TypeScript 入门手册](https://toddmotto.com/typescript-the-missing-introduction)\n\n#### {babel}\n\n{babel} + webpack 已经成了 ES6 代码转换、React 模板编译的标准工具组合，{babel} 最初是用来编译 ES6 的，但得益于他的插件系统，如今俨然已经演化成一个用途广泛，几乎能实现各种代码转换的工具。\n\n#### {flow}\n\n{flow} 并不是一个编译工具，它只是一个基于 JS 代码标记的静态类型检查工具，也就是说，使用 Flow 时需要在代码中添加各种注释来注明需要的数据类型，关于 Flow 的使用，可以阅读[这篇文章](http://javascriptplayground.com/blog/2017/01/npm-flowjs-javascript/)。\n\nFlow 在很多 Facebook 项目的源代码中都有使用，而 Facebook 已经成为开源社区的重要玩家，开源了 {react}、{react-native}、{flux}、{immutable}、{jest} 等众多的项目，相信你明白这意味着什么。\n\n#### {coffeescript}\n\n{coffeescript} 的简洁语法大量借鉴了 Python 和 Ruby 的语言特性，过去几年曾经是最受欢迎的编译器，但 2016 年很多开发者从 CoffeeScript 转向了 ES6 + {babel} 组合。\n",year:"2016"}}},{node:{relativePath:"2016/categories/framework/en.md",size:"2116",base:"en.md",ext:".md",internal:{contentDigest:"092b150c564dfa49a188a526ce3cfdee"},fields:{key:"categories.framework",language:"en",markdown:'This *Front-end Frameworks* category is maybe the one that is responsible for what was called [the JavaScript fatigue](https://medium.freecodecamp.com/javascript-fatigue-fatigue-66ffb619f6ce#.soeh5g56p) in 2016.\nIt seemed that every month a new contender made the buzz, pushing the pace of innovation!\n\nTo be exact, 2 kinds of projects are mixed in the category:\n\n* Full frameworks that include all features to create a modern web application (routing, data fetching, state management). {angular-1}, {angular-2}, {ember} or {aurelia} fall in this category.\n* Lighter solutions that focus on the UI layer, like {react}, {vuejs}, {inferno}...\n\nWe have already mentioned {vuejs} (number 1 overall), let\'s see the other contenders.\n\n#### React and its contenders\n\n{react} is number 2, no front-end developer can ignore React and its rich eco-system.\n\n{react} is so popular that it inspired a lot of other libraries that aim to take the best of React, without the fat, in order to improve both performance in the browser and building time.\n\n{inferno} was the most popular project in this category, it claims to be the fastest alternative to React.\n\nFollowing closely Inferno in our rankings, {preact} is a nice alternative to React too.\nIts eco-system is quite mature, for example there is a boilerplate with offline capabilities, a router, a *compat* module so that you can use any existing React library inside your Preact project.\n\n#### Angular 1 and 2\n\nAngular project has been split into 2 repositories because Angular 2 is a full rewrite of Angular 1, even if some concepts remain the same.\n\n{angular-2} is written in TypeScript and takes advantage of ES6 to deliver a modern and thorough framework.\n\n{angular-1} (called "AngularJS" on Github) is still used in many projects and will remain popular for a while.\n\nIt\'s worth to mention that {ember}, despite its large eco-system and its community is not in the top 10.\n\nSo it seems that, rather than opting for full frameworks with all features "out of the box", developers in 2016 flavored lighter approaches and prefer to compose their own solution "à la carte".\n',year:"2016"}}},{node:{relativePath:"2016/categories/framework/ja.md",size:"2885",base:"ja.md",ext:".md",internal:{contentDigest:"7a19ff1b4b565c0ebc86561382641409"},fields:{key:"categories.framework",language:"ja",markdown:"この *フロントエンドフレームワーク* カテゴリは恐らく、2016年に話題になった [JavaScript疲れ(the JavaScript fatigue)](https://medium.freecodecamp.com/javascript-fatigue-fatigue-66ffb619f6ce#.soeh5g56p) の要因の1つです。\n毎月のように新しい競合が現われてはバズり、イノベーションを牽引してきました。\n\nこのカテゴリには2種類のプロジェクトが含まれています:\n\n* フルスタックフレームワーク: Webアプリケーションに必要なすべてを含むフレームワーク (ルーティング、データ取得、状態管理など)\n    * 例: {angular-1}, {angular-2}, {ember}, {aurelia}\n* 軽量フレームワーク: フロントエンドの UI にフォーカスしたフレームワーク\n    * 例: {react}, {vuejs}, {inferno}\n\nカテゴリ・総合共に1位の {vuejs} にはすでに触れたので、他の競合フレームワークを見て行きましょう。\n\n#### React とその競合フレームワーク\n\n{react} はカテゴリ2位で、フロントエンド開発者は React とその豊富なエコシステムを無視できないほどです。\n\n{react} はとても人気があり、そのの地位を狙う他のたくさんの競合フレームワークに影響を与えています。\nあるものは React よりも軽量を、またあるものはブラウザ上のパフォーマンス向上、ビルド時間の短縮などを目指しています。\n\n{inferno} もこのカテゴリでもとて人気のあるプロジェクトで、最速の React 代替フレームワークをうたっています。\n\nInferno と僅差の {preact} もすばらしい React 代替フレームワークです。\nPreact のエコシステムはかなり充実していて、例えばオフラインでも動作するひな型 *preact-boilerplate* 、ルーター、 *preact-compat* (React のモジュールを使用にするモジュール)などがあります。\n\n#### AngularJS (version 1.x) & Angular 2\n\nAngularJS と Angular 2 のリポジトリは 2つに分割されました。コンセプトはそのままながら、Angular 2 がフルスクラッチで書き直されたためです。\n\n{angular-2} は TypeScript で書かれており、ES6 の恩恵も受けられるモダンなフレームワークです。\n\n{angular-1} は今でも多くのプロジェクトで使用されていて、今後もしばらく人気は続きそうです。\n\n{ember} も注目に値するフレームワークで、巨大なエコシステムやコミュニティを有しながらもトップ10には入りませんでした。\n\nこのことから2016年の開発者は、出来合いのフルスタックフレームワークを選ぶよりも、軽量フレームワークで自分好みの構成を作り上げる方を好んでいたように見えます。\n",year:"2016"}}},{node:{relativePath:"2016/categories/framework/zh.md",size:"2063",base:"zh.md",ext:".md",internal:{contentDigest:"e4b62c516a2bf3ff16e9e8070f84ce4a"},fields:{key:"categories.framework",language:"zh",markdown:'**前端框架** 的百花齐放也许是出现 [JS 疲劳](https://medium.freecodecamp.com/javascript-fatigue-fatigue-66ffb619f6ce#.soeh5g56p) 的原因所在，新的框架、工具和库层出不穷，把创新的车轮推向前进。\n\n概括来讲，前端框架可以分为两大类：\n\n* 大而全的框架，包括创建现代 WEB 应用的所有功能特性，比如路由、数据获取、状态管理，典型项目有：{angular-1}、{angular-2}、{ember} 和 {aurelia}。\n* 小而美、聚焦在 UI 层面的解决方案，典型项目有 {react}、{vuejs}、{inferno}...\n\n前文中我们已经探讨了排名第 1 的项目 {vuejs}，下面来看看其他竞争者：\n\n#### React 及其竞争者\n\n{react} 排名第 2，所有开发者都知道 React 有着庞大的社区和完整的生态系统。\n\n{react} 设计思想非常流行，受 React 启发而诞生了大量类 React 项目，这些项目继承 React 优点的同时有非常大的改进，比如各种能提高性能和缩短构建时间的瘦身版本。\n\n{inferno} 在类 React 项目中是最受欢迎的，它自己则标榜是所有竞争者中性能最快的。\n\n{preact} 也是一个非常不错的选择，它也有不错的生态，比如各种脚手架、路由，甚至还有一个 *compact* 模块让任何能在 React 环境运行的库在 Preact 中运行。\n\n#### Angular 1 和 Angular 2\n\nAngular 项目已经被拆分成两个仓库，因为 Angular 2 几乎是 Angular 1 的全面重写，虽然两者在部分概念上是相同的。\n\n{angular-2} 全部用 TypeScript 编写，这样它利用 ES6 语法特性提供了现代的、全面的 WEB 框架。\n\n{angular-1} (在 Github 上称作 "AngularJS") 目前仍然被大量的项目使用，目测会持续流行一段时间。\n\n此外，不得不提的 {ember}, 虽然社区和生态都很大，但是没有排到前 10 名。\n\n整体来看，相比于那些开箱即用的大而全的框架，开发者更青睐自己组合使用那些小而美的轻量级解决方案，因为这样给了他们更大的自由度。\n',year:"2016"}}},{node:{relativePath:"2016/categories/mobile/en.md",size:"1214",base:"en.md",ext:".md",internal:{contentDigest:"6f30ebe5365b3446a6fa48dbf706897d"},fields:{key:"categories.mobile",language:"en",markdown:'JavaScript is so ubiquitous that you can build native mobile applications using technologies web developers already know (HTML, JavaScript, CSS).\n\n#### {react-native}\n\nWith React Native, from the same code base, you can build iOS and Android real **native** mobile applications, using concepts familiar to React developers. To know more about building applications for both iOS and Android, read [this tutorial](http://makeitopen.com/).\n\nOther solutions, based on Cordova, used to rely on Webview to render the screens and were not as efficient as a native solution.\n"Write Once Run Everywhere"... This is a developer\'s dream came true!\n\n#### {ionic}\n\n{ionic} was a pioneer with the concept of "hybrid" applications.\nUnder the hood, it\'s based on Cordova to access the mobile device features. It\'s very mature with a large eco-system.\n\n#### {nativescript}\n\n{nativescript} aims for the same goal as {react-native} (build real mobile applications using web technologies). It comes in 2 flavors, NativeScript Core and NativeScript + Angular 2\n\n#### Looking forward...\n\nA project to follow closely in 2017: [Weex](https://weex-project.io/), *a framework for building Mobile cross-platform UI* built on top of {vuejs}.\n',year:"2016"}}},{node:{relativePath:"2016/categories/mobile/zh.md",size:"1197",base:"zh.md",ext:".md",internal:{contentDigest:"e336235407dc4d68f51569f8f85618f4"},fields:{key:"categories.mobile",language:"zh",markdown:"JS 的通用性是毋庸置疑的，现如今可以用 WEB 工程师非常熟悉的技术（HTML、JS、CSS）构建 Native 移动应用。下面是几个典型的解决方案：\n\n#### {react-native}\n\n使用 React Native，可以用类似于 React 思路，用同一份代码构建出支持 iOS 和 Android 平台的、真正的 **Native** 应用，想了解如何构建跨平台的更多内容？建议阅读[这篇](http://makeitopen.com/)教程。\n\n其他基于 Cordova 的方案多使用 Webview 来渲染页面，相比于 Native 应用运行时性能会大打折扣，不过，开发者那种 “Write Once Run Everywhere” 的梦想终于成真了！\n\n#### {ionic}\n\n{ionic} 是 “hybird” 应用开发领域的先锋，底层基于 Cordova 来访问移动设备的系统功能，社区和生态系统非常成熟。\n\n#### {nativescript}\n\n{nativescript} 和 {react-native} 的目标是相同的，即基于 WEB 技术构建 Native 应用，其核心分为两部分：NativeScript 内核，NativeScript + Angular 2。\n\n#### 展望未来...\n\n[Weex](https://weex-project.io/) 是 2017 年需要密切留意的项目，他是基于 {vuejs} 的、用来创建跨平台移动应用的框架。\n",year:"2016"}}},{node:{relativePath:"2016/categories/mobile/ja.md",size:"1911",base:"ja.md",ext:".md",internal:{contentDigest:"5229349503ddd8585ccd145cda702dda"},fields:{key:"categories.mobile",language:"ja",markdown:'JavaScriptが普及したおかげで、Webデベロッパーの知識（HTML、JavaScript、CSS）で、モバイル向けのネイティヴアプリケーションが開発できるようになりました。\n\n#### {react-native}\n\nReact NativeならWebアプリケーションと同じコードベースから、真に**ネイティヴ**なiOSとAndroidアプリケーションを開発できます。そのコンセプトは、Reactを知っているデベロッパーであればなじみ深いものです。開発の詳細を知りたい方は、この[チュートリアル](http://makeitopen.com/)が参考になります。\n\nその他のソリューションではCordobaをベースにしたものが多く、スクリーンのレンダリングにWebviewを利用しています。いずれも、React Native ほどの効率的な実装は難しいようです。"Write Once Run Everywhere"（１度書けばどこでも動く）、というデベロッパーの夢がついに現実になりました！\n\n#### {ionic}\n\n{ionic} は、「ハイブリッド」アプリケーションというコンセプトの草分け的存在のひとつです。裏側では、Cordovaを利用してモバイルデヴァイスのフィーチャへアクセスしています。充実したエコシステムを作り上げています。\n\n#### {nativescript}\n\n{nativescript} は {react-native} と同じゴール（Webのテクノロジでモバイルアプリケーションを実装すること）を目指しています。実装のアプローチとしては、NativeScript CoreとNativeScript + Angular 2の２種類があります。\n\n#### さて、今年の注目は？\n\n2017年、この分野の注目プロジェクトとして、{vuejs} の上に実装された*「モバイル向けクロスプラットフォームUIフレームワーク」*[Weex](https://weex-project.io/) を挙げておきます。\n',year:"2016"}}},{node:{relativePath:"2016/categories/ide/en.md",size:"787",base:"en.md",ext:".md",internal:{contentDigest:"7d53a62f47135fb5b61052e87b9f161a"},fields:{key:"categories.ide",language:"en",markdown:'About IDE (*Integrated Development Environment*), it\'s worth to mention that 2 of the most popular IDEs are open-source projects made with web technologies.\n\n#### {visual-studio-code}\n\nIn our results, Microsoft leads the way with {visual-studio-code}.\n\nIt provides a nice integration with {typescript} and node.js.\nSome developers mention improvement about development speed thanks to the *IntelliSense* feature (a mix of highlighting and autocomplete).\n\nSaying "open source" and "Microsoft" in the same sentence is no more an oxymoron!\n\n#### {atom}\n\n{atom}, pushed by Github and built with {electron} (like several other desktop applications, including the Slack desktop client) is not far behind {visual-studio-code}. An interesting fact about Atom: its main language is CoffeeScript!\n',year:"2016"}}},{node:{relativePath:"2016/categories/ide/ja.md",size:"1270",base:"ja.md",ext:".md",internal:{contentDigest:"a4ab029c6afc3b2771b6b6916afd0311"},fields:{key:"categories.ide",language:"ja",markdown:"統合開発環境（*Integrated Development Environment*、略してIDE）について触れておきましょう。Webテクノロジで実装されたIDEのなかで、最も人気の高いオープンソースプロジェクトを２つ紹介します。\n\n#### {visual-studio-code}\n\n結果をみると、IDEではMicrosoftの {visual-studio-code} がリードしています。 \n\n{visual-studio-code} は {typescript} とNode.jsをうまくインテグレーションしています。*IntelliSense*（ハイライティングと自動補完の機能）が使えれば、開発効率はもっと上がると指摘するデベロッパーも少なくないようです。\n\n「オープンソース」と「MicroSoft」を同じセンテンスで使うことは、もはや矛盾でもなんでもありません！\n\n#### {atom}\n\nGithub謹製の {atom} は、他の多くのデスクトップアプリケーション同様に {electron} で実装されています（例えば、Slackのデスクトップクライアントも {electron})。チャートをみてもわかるように、{visual-studio-code} にそれほど劣後しているわけではありませんね。あと、Atomで興味深いのは、メイン言語がCoffeeScriptなことでしょうか。\n",year:"2016"}}},{node:{relativePath:"2016/categories/ide/zh.md",size:"732",base:"zh.md",ext:".md",internal:{contentDigest:"30b0e0e612d81cbd02f28fc899e6f6f0"},fields:{key:"categories.ide",language:"zh",markdown:"说到 IDE（集成开发环境，Integrated Development Environment），令人振奋的是最受欢迎的 2 款 IDE 都是用 WEB 技术开发的开源项目。\n\n#### {visual-studio-code}\n\n微软的 {visual-studio-code} 在 WEB 开发者群体中非常受欢迎，因为他提供了非常棒的 {typescript} 和 Node.js 集成，部分开发者甚至特别提到 {visual-studio-code} 的**智能感知**功能极大的提高了开发效率。现在把微软和开源放在一起，终于不那么违和了。\n\n#### {atom}\n\n{atom} 由 Github 开源，使用 {electron} 构建，在受欢迎程度上并没有落后 {visual-studio-code} 太多，关于 Atom 的一个有趣事实是，他所使用的主要语言是 CoffeeScript。\n",year:"2016"}}},{node:{relativePath:"2016/categories/nodejs-framework/en.md",size:"2040",base:"en.md",ext:".md",internal:{contentDigest:"bea18b238a41eebc33201888bb28e7af"},fields:{key:"categories.nodejs-framework",language:"en",markdown:"In 2016 it has never been easier to create and deploy a node.js application with solutions like:\n\n* [Now](https://zeit.co/now)\n* [Webtask.io](https://webtask.io/)\n* [Stdlib](https://stdlib.com/)\n\nProjects like [Glitch](https://glitch.com/) (previously called _Gomix_) even lowered the barrier to the node.js world, making easy to anyone to **write** and **share** node.js code in a few clicks, right from the browser.\n\nSo if you have to build a web application, which framework to choose?\n\n#### {express}\n\nWhen you build a web application with node.js, {express} is often considered as the de-facto web server.\nIts philosophy (a minimalistic core that you can extend using middleware packages) is familiar to most of node.js developers.\n\n#### {koa}\n\n{koa} philosophy is close to {express} but it's built using ES6 generators to avoid a problem sometimes called _[ Callback Hell](https://www.sitepoint.com/saved-from-callback-hell/)_.\n\n#### {feathers}\n\n{feathers} is a very flexible solution to create a \"service oriented\" architecture, it's a good fit to create node.js microservices.\n\n#### {nodal}\n\n{nodal} framework targets stateless and distributed services connected to PostgreSQL databases.\n\n#### {keystone}\n\n{keystone} is one of the best solutions I know to get an admin client up and running, in order to manage the content coming from a MongoDB database.\nThe Admin UI is automatically generated from the models, has all CRUD actions and nice filters.\n\n#### {sails}\n\n{sails} is a full MVC framework, very inspired by Ruby on Rails (hence the name **S**ails!). It has been around for a long time. It can play with any kind of database, SQL or non-SQL.\n\n#### {loopback}\n\n{loopback} is another mature framework with a lot of built-in features, including authentication with token and connectors to any kind of database.\n\nThe killer feature is the **API explorer** that lets developers check all API end-points in an intuitive way, with the ability to check any user's token.\nIt's definitively a good choice if you have to build an API.\n",year:"2016"}}},{node:{relativePath:"2016/categories/nodejs-framework/ja.md",size:"2692",base:"ja.md",ext:".md",internal:{contentDigest:"384fd345f70a12523cbbfc4dbcfc6872"},fields:{key:"categories.nodejs-framework",language:"ja",markdown:"2016 年、以下のようなサービスの登場により開発、デプロイがとても簡単になりました。\n\n* [Now](https://zeit.co/now)\n* [Webtask.io](https://webtask.io/)\n* [Stdlib](https://stdlib.com/)\n\nまた、 [Glitch](https://glitch.com/) のようなサービスによりブラウザから数回クリックするだけで誰でも簡単にコードを書いて共有することができるようになり、 node.js の世界へ足を踏み入れる障壁を下げました。\n\nさて、アプリケーションを実装するにあたってどのフレームワークを利用しましょうか。\n\n#### {express}\n\nNode.js で Web アプリケーションを構築する場合、web サーバーのデファクトとなっている {express} は一番に選択肢に上がるのではないでしょうか。\n\n{express} は、必要最低限のコアモジュールでできており利用者は middleware と呼ばれるパッケージを追加して機能を拡張していきます。\nこれは node.js の開発者には馴染みのスタイルですね。\n\n#### {koa}\n\n{koa} の設計思想は {express} によく似ていますが、 ES6 で書くことが出来るためいわゆる _[ Callback Hell](https://www.sitepoint.com/saved-from-callback-hell/)_ の呪縛から逃れることができます。\n\n#### {feathers}\n\n{feathers} はサービス指向アーキテクチャに柔軟に対応でき、 microservices なシステムの構築に適しています。\n\n#### {nodal}\n\n{nodal} フレームワークは PostgreSQL に接続されたステートレスで分散したサービスをターゲットにしています。\n\n#### {keystone}\n\n{keystone} は MongoDB のコンテンツを管理する画面を設けるのに優れたツールの一つです。その管理画面は DB のモデルから自動で作られ、 CRUD の一通りの処理と便利なフィルターを備えています。\n\n#### {sails}\n\n{sails} はフル MVC のフレームワークで、 **S**ails という名前からも分かる通り Ruby on Rails ライクなフレームワークです。 その歴史は長く、 各種 SQL / no-SQL なデータベースと接続することができます。\n\n#### {loopback}\n\n{loopback} は成熟したフレームワークのひとつで、トークンを用いた認証や様々なデータベースに対応いるなど多くの機能が実装されています。\n\n**API explorer** は非常に強力な機能で、すべての API end-points を直感的に確認することができ、どんなユーザーのトークンも確認することができます。API の実装に非常に適したフレームワークです。\n",year:"2016"}}},{node:{relativePath:"2016/categories/nodejs-framework/zh.md",size:"1911",base:"zh.md",ext:".md",internal:{contentDigest:"1b4834bda3e2caf159f3b1c742b90d57"},fields:{key:"categories.nodejs-framework",language:"zh",markdown:"2016 年创建和部署 Node.js 应用变得空前的容易，比如下面这些解决方案：\n\n* [Now](https://zeit.co/now)\n* [Webtask.io](https://webtask.io/)\n* [Stdlib](https://stdlib.com/)\n\n类似于 [Glitch](https://glitch.com/) 的项目则把 Node.js 的门槛降到不能再低，只需要通过浏览器简单的点击拖拽就都能轻而易举的**编写**和**分享** Node.js 代码。\n\n那么，如果想创建一个 WEB 应用，我们该选哪个框架呢？\n\n#### {express}\n\n{express} 已经成为开发 Node.js WEB 应用的标准框架，大多数工程师都很熟悉他的设计思想（极简的内核，但能让你用各种中间件来扩展他的功能）。\n\n#### {koa}\n\n{koa}，设计思想非常类似 {express}，区别在于它是使用 ES6 中的 generator 编写的，这种写法解决了大家所熟知的[回调地狱](https://www.sitepoint.com/saved-from-callback-hell/) 问题。\n\n#### {feathers}\n\n{feathers}，是用来实现面向服务架构的一种灵活的解决方案，非常适合创建 Node.js 微服务。\n\n#### {nodal}\n\n{nodal}，用来创建基于 PostgreSQL 的无状态的、分布式的服务。\n\n#### {keystone}\n\n{keystone}，是我所知的快速搭建基于 MongoDB 的管理后台的最佳解决方案，Keystone.js 基于数据模型的定义即可自动生成后台界面，支持常见的增删改查操作和灵活的数据过滤。\n\n#### {sails}\n\n{sails}，是一个全能的 MVC 框架，主要是受到 Ruby on Rails 启发，他已经存在很长时间，支持各种数据库，不管是 SQL 还是 No-SQL。\n\n#### {loopback}\n\n{loopback}，内置了很多特性的成熟框架，支持基于 token 的认证，支持各种数据库。 loopback 的“杀手锏”功能是 **API 浏览器**，该功能能让开发者用非常直观的方式查看所有的 API 接口，如果你需要创建 API 服务的话，它无疑是个很好的选择。\n",year:"2016"}}},{node:{relativePath:"2016/categories/react/en.md",size:"1839",base:"en.md",ext:".md",internal:{contentDigest:"965df4b5e3a8f4cd06367d4ed42cee93"},fields:{key:"categories.react",language:"en",markdown:'React is a great UI library but using React and the modern web development workflow tools require a lot of configuration.\nSo how to start creating a real-world application?\n\nIt\'s the answer provided by the React "boilerplates" and other "starter kits"...\n\n#### {create-react-app}\n\nFacebook addressed the need by providing a lighter approach called {create-react-app} that is a very convenient way to start a new React project.\n\n[Dan Abramov](https://github.com/gaearon) (the creator of Redux, now working for Facebook) did a great job, finding the right balance between simplicity and features. For example there is no fancy styling solution (just plain CSS), no server-side rendering, but everything is well packaged and the developer experience is really good.\n\nThe main difference with its contenders is that if you use {create-react-app}, it becomes a dependency of your project, all the magic is hidden and what you see is only **your** application code. You can upgrade the dependency at any time, it\'s not just a starting point.\n\n#### {react-boilerplate}\n\nThe well named {react-boilerplate} has everything you need, including {redux} and some nice offline features, taking advantage of the web workers technology.\n\nIt lets developers create what is called *Progressive Web Applications* (or *PWA*): web applications that run offline, using a technology called Service Worker, for more information you can read [this article](https://ponyfoo.com/articles/progressive-app-serviceworker) from Nicolás Bevacqua.\n\n#### {nextjs}\n\n{nextjs}, created by the busy folks from [Zeit](https://zeit.co/), has a server-side rendering feature that can be used to create *universal* applications (or *isomorphic* applications, as we used to say in 2015), that is to say applications that run more or less with the same code client AND server-side.\n',year:"2016"}}},{node:{relativePath:"2016/categories/react/ja.md",size:"2582",base:"ja.md",ext:".md",internal:{contentDigest:"613c129ef7e2a96308beec2bc7300ff2"},fields:{key:"categories.react",language:"ja",markdown:"React はとてもすばらしい UI のライブラリですが、React やその最新のWeb開発ツールはたくさんの構成・設定を必要とします。\nでは実際のアプリケーションを作りはじめるにはどうすればいいのでしょうか？\n\nreact-boilerplates とその他のスターターキットがその答えを用意してくれています。\n\n#### {create-react-app}\n\nFacebook は手軽に React のプロジェクトを開始できる {create-react-app} を公開しました。\n\n[Dan Abramov](https://github.com/gaearon) (Redux の作者で、現在 Facebook 在籍) はシンプルさと多機能の絶妙なバランスを見出しました。\n奇抜な stylesheet も使わず(普通の CSS のみ)、サーバーサイドの描画もせず、それでいて全体をうまくまとめた上で開発者体験もすばらしいという落しどころを。\n\n{create-react-app} の他の競合ツールとの主な違いは、これを使ってプロジェクトをはじめれば依存関係や設定をすべて隠蔽してくれることです。\n依存モジュールや設定などの魔術的なものはすべて隠蔽されて、書き足したアプリケーションのコードのみが見える状態になります。\nプロジェクト開始時のみに使うのではなく、いつでも依存関係を最新な状態に更新することもできます。\n(なんと隠蔽されている依存関係をすべて書き出すこともできます)\n\n#### {react-boilerplate}\n\n{react-boilerplate} には、{redux} や他のオフライン機能のモジュール、Web Worker など、必要になる機能はすべて含まれてます。\n\nこれを使えば *プログレッシブウェブアプリ* (*PWA*) と呼ばれるアプリケーションを作成できます。\nプログレッシブウェブアプリは Service Worker という技術を使用して、オフラインでも動作するウェブアプリケーションです。\n詳しくは Nicolás Bevacqua. の [this article](https://ponyfoo.com/articles/progressive-app-serviceworker) を参照してくさい。\n\n#### {nextjs}\n\n{nextjs} は [Zeit](https://zeit.co/) の多忙な人達によって開発されました。\nサーバーサイドでの描画機能も持つため、サーバーサイドとクライアントサイドでコードをコードを共有できる *ユニバーサル* アプリケーションを作成できます。\n(ユニバーサルアプリケーションは、2015年には Isomorphic と呼ばれていたようです)\n",year:"2016"}}},{node:{relativePath:"2016/categories/react/zh.md",size:"1701",base:"zh.md",ext:".md",internal:{contentDigest:"e957f12e21f8b5ec646f055b9ce63ed4"},fields:{key:"categories.react",language:"zh",markdown:"React 是非常棒的 UI 库，但是基于现代 WEB 应用开发工作流创建 React 应用时仍然需要大量的配置，才能把所有的部分拼凑到一起，如何创建一个“真实”的 React 应用呢？各种 React 项目模板（boilerplates）和启动工具箱（starter kits）就是来解决这个问题的，典型的有下面几个：\n\n#### {create-react-app}\n\nFacebook 开源的，轻量级的解决方案，使用 {create-react-app} 创建 React 应用非常的简单。{create-react-app} 的作者 [Dan Abramov](https://github.com/gaearon) (也是 Redux 的作者，目前供职于 Facebook) 在功能丰富和简单可靠之间取得了很好的平衡，没有酷炫的样式解决方案 (仅需要纯粹的 CSS) ，没有服务端渲染，但是 React 应用开发的其他方面都浑然一体，开发者体验也非常棒。\n\n相比于同类工具，如果你使用了 {create-react-app}，它会成为你项目的依赖，所有的黑科技都是不可见的，你只能看到你自己的应用代码，你可以随时更新这个依赖。\n\n#### {react-boilerplate}\n\n{react-boilerplate} 则包含了 React 应用所需的一切，包括 {redux} 以及基于 Web Worker 实现的离线功能。使用它可以创建“渐进式 Web 应用”（亦称“PWA”），如果想了解更多 PWA 的知识，可以阅读 Nicolás Bevacqua 的 [这篇文章](https://ponyfoo.com/articles/progressive-app-serviceworker)。\n\n#### {nextjs}\n\n{nextjs}, 由来自 [Zeit](https://zeit.co/) 的 busy folks 创建，支持服务端渲染，可以用来创建 **universal** 应用（或者“同构应用”），直白的说，这种应用的前后端可以运行相同的代码。\n",year:"2016"}}},{node:{relativePath:"2016/categories/ssg/en.md",size:"1152",base:"en.md",ext:".md",internal:{contentDigest:"5ec73eace618d5c3417fc16402558bdc"},fields:{key:"categories.ssg",language:"en",markdown:"Static site generators (or \"SSG\") are tools that generate a bunch of .html, .css and JavaScript files that you can deploy on any simple web server (Apache or NGNX) without the fuss of setting up a database.\nAs {gatsby} web site says:\n\n> Build sites like it's 1995\n\nStatic web sites are fast, robust and easy to maintain.\n\nSSG are very popular because there are a lot of very good solutions to host static web site for free:\n\n* [Github pages](https://pages.github.com/)\n* [Gitlab pages](http://pages.gitlab.io/)\n* [Netlify](https://www.netlify.com/)\n* [Surge](https://surge.sh/)\n* [Now static](https://zeit.co/blog/now-static)\n\n#### {hexo}\n\nIn 2016, the most popular SSG built with node.js was {hexo}. It's a thorough SSG, close to CMS systems like Wordpress, that can be used to build a blog for example.\nIt has a lot of features including an internationalization plugin.\n\n#### {gatsby}\n\nThe newcomer {gatsby} is a very interesting solution, it stands out from its contenders because it uses React ecosystem to generate static html files. The fact that you can combine React components, Markdown files and server-side rendering makes it very powerful.\n",year:"2016"}}},{node:{relativePath:"2016/categories/ssg/ja.md",size:"1758",base:"ja.md",ext:".md",internal:{contentDigest:"00526a013202ecf87ae4d537c428690d"},fields:{key:"categories.ssg",language:"ja",markdown:'静的サイトジェネレータ（"Static Site Generators" 略してSSG） は .html, .css, JavaScriptといったWebサイトを構成するファイル一式を生成してくれるツールです。生成されたファイルは、ApacheやNginxのシンプルなWebサーバーへ悩み無用でデプロイできます。データベースやWebアプリケーションフレームワークのセットアップも不要です。例えば、SSGのひとつである {gatsby} は自らをこう表現しています:\n\n> 1995年ころのようにサイトを構築する。\n\n静的なWebサイトは高速、堅牢で、メンテナンスも容易です。\n\nSSGが人気なのは、静的なWebサイトを無料でホスティングできるサービスが多いことも要因でしょう。\n\n* [Github pages](https://pages.github.com/)\n* [Gitlab pages](http://pages.gitlab.io/)\n* [Netlify](https://www.netlify.com/)\n* [Surge](https://surge.sh/)\n* [Now static](https://zeit.co/blog/now-static)\n\n#### {hexo}\n\n2016年でもっとも人気のあったSSGがNode.jsでビルドする {hexo} です。とてもよくできたSSGで、WordpreessのようなCMSに近く、ブログの構築に利用できます。i18nプラグインを含め、多くのフィーチャを提供しています。\n\n#### {gatsby}\n\nニューカマーの {gatsby} のソリューションは非常に興味深いものです。静的htmlファイルを生成するのにReactのエコシステムを利用しており、競合と一線を画しています。Reactコンポーネントを取り込んでいることからもわかるように、Markdownやサーバーサイドレンダリングをサポートしており、パワフルな仕上がりになっています。\n',year:"2016"}}},{node:{relativePath:"2016/categories/ssg/zh.md",size:"1141",base:"zh.md",ext:".md",internal:{contentDigest:"6b4b1ca7ac438b4760dea96a6d70e200"},fields:{key:"categories.ssg",language:"zh",markdown:"静态网站生成器（SSG）是指能够生成一大坨 HTML、CSS、JS 文件方便你快速部署到简单的 WEB 服务器上而不用安装和配置数据库的工具。就像 {gatsby} 所标榜的：\n\n> 像 1995 年那样构建网站。\n\n静态网站的特点是速度快、健壮行高、容易维护。\n\n静态网站如此流行的重要原因是市面上有很多非常好用并且免费的静态网站托管解决方案，比如：\n\n* [Github pages](https://pages.github.com/)\n* [Gitlab pages](http://pages.gitlab.io/)\n* [Netlify](https://www.netlify.com/)\n* [Surge](https://surge.sh/)\n* [Now static](https://zeit.co/blog/now-static)\n\n#### {hexo}\n\n2016 年最流行的静态网站生成工具是 {hexo}，他有点类似于 Workdpress 这样的 CMS 系统，可以用来方便的创建博客网站，他还有很多其他的特性，比如国际化插件。\n\n#### {gatsby}\n\n新玩家 {gatsby} 是一个比较有趣的解决方案，相比于竞争者优秀的地方在于：它使用 React 生态系统来生成静态文件，可以组合 React Component、Markdown 和服务端渲染来完成静态网站生成让他更强大。\n",year:"2016"}}},{node:{relativePath:"2016/categories/test-framework/en.md",size:"818",base:"en.md",ext:".md",internal:{contentDigest:"30e891add0025e7343a8b72ea37c6771"},fields:{key:"categories.test-framework",language:"en",markdown:"The 2 most famous testing frameworks are {jasmine} and {mocha} but 2 more recent projects got more traction in 2016: {ava} and {jest}.\n\n#### {ava}\n\n{ava}, created by the prolific [Sindre Sorhus](https://github.com/sindresorhus) puts emphasize on performance (parallel test) and ES6. AVA's syntax is close to standard test frameworks like {tape} and {node-tap}.\n\n#### {jest}\n\n{jest}, another Facebook project, got a lot of traction over the last weeks. It's well-known in the React community, more and more people are moving to Jest (read [this story](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.z9x53j1ea) for example) and it may become the most popular testing framework in 2017.\n\nJest has good built-in mocking abilities, whereas other testing frameworks usually rely on libraries like {sinonjs}.\n",year:"2016"}}},{node:{relativePath:"2016/categories/test-framework/ja.md",size:"1338",base:"ja.md",ext:".md",internal:{contentDigest:"7a05b6932e616b7697a6ac1af3d42cea"},fields:{key:"categories.test-framework",language:"ja",markdown:"最も有名なテスティングフレームワークといえば {jasmine} と {mocha} ですが、2016年には新たなプロジェクトがこのカテゴリで多くの支持を獲得しました。{ava} と {jest} です。\n\n#### {ava}\n\n{ava} は多産で知られる [Sindre Sorhus](https://github.com/sindresorhus) がクリエーターのテスティングフレームワークです。パフォーマンス（並列テスト）とES6 サポートが売りです。AVA のシンタックスは標準的なテスティングフレームワークである {tape} や {node-tap} に近いものになっています。\n\n#### {jest}\n\n{jest} はFacebookのプロジェクトであり、ここ数週間で多くの支持を獲得しています。Reactコミュニティでは当初からよく知られていましたが、じわじわとユーザを獲得していきました（例えば[この記事](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.z9x53j1ea)を参考）。2017年には、最も人気の高いテスティングフレームワークになっているかもしれません。\n\n大抵のテスティングフレームワークでは、{sinonjs} などの外部ライブラリに依存することの多いMockの実装ですが、Jestには優れたMock関数がビルトインされています。\n",year:"2016"}}},{node:{relativePath:"2016/categories/test-framework/zh.md",size:"862",base:"zh.md",ext:".md",internal:{contentDigest:"db3223202e5db7a5ad012f1a902c3f92"},fields:{key:"categories.test-framework",language:"zh",markdown:"相比于流行了很久的测试框架 {jasmine} 和 {mocha}，2016 年出现了 2 个更新的、并有很多人使用的测试框架：{ava} 和 {jest}。\n\n#### {ava}\n\n{ava} 由非常高产的 [Sindre Sorhus](https://github.com/sindresorhus) 开发和维护，其标榜的重点是性能和 ES6，能够并行的运行测试。AVA 的语法非常类似 {tape} 和 {node-tap}。\n\n#### {jest}\n\n{jest}，又一个 Facebook 开源项目，最近几个月引起了大量的开发者注意，在 React 社区更加流行，并且越来越多的人开始迁移到 Jest，可以阅读这个[故事](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.z9x53j1ea)，2017 年 Jest 极有可能成为最受欢迎的测试框架。\n\nJest 内置了非常强大的 Mock 特性，而其他的测试框架通常需要依赖第三方的 Mock 包，比如 {sinonjs}.\n",year:"2016"}}},{node:{relativePath:"2017/categories/all/en.md",size:"2682",base:"en.md",ext:".md",internal:{contentDigest:"debd4891babd32a0314e90f87fd4cf5e"},fields:{key:"categories.all",language:"en",markdown:"### Overview\n\nThese are the hottest projects of the year, all categories included.\n\n### Vue.js strikes again\n\nOnce again, {vuejs} is the trendiest project of the year, with more than 40,000 stars added on GitHub during the year.\n\nIt's far more than in 2016 (26,000 stars), and the gap with the next contender ({react}) is even bigger.\n\nSo what makes Vue.js special?\n\n* First, it has a small learning curve, with a component approach similar to {react} but with a more familiar syntax.\n* The ecosystem is well defined, including a set of de-facto standards: router: {vue-router}, State management library: {vuex}\n* The concept of single-file component that includes template, logic and styles in a single file `.vue` file is really nice.\n* It's used by one of the most popular PHP frameworks, [Laravel](https://laravel.com/), as its default view engine.\n* It's not backed by a big company of the Internet like Facebook or Google but maintained by [Evan You](https://github.com/yyx990803) as an open-source project sponsored through crowd-sourcing.\n\nAnd this may be related with the last point, but Vue.js is very popular among developers from China. It's used by the biggest e-commerce platform of China (Alibaba), but also by companies like GitLab or Adobe.\n\n### React, number 2, again!\n\nLike in 2016, {react} is number 2, with more than 27,000 stars added on GitHub (note that we're specifically talking about stars _added_ over the year, not the _total_ number of stars).\n\n{create-react-app}, the third project, is the recommended way to start a new project with React, and its success made a lot of React boilerplates less relevant than before.\n\n[Dan Abramov](https://github.com/gaearon) (the creator of {redux}, now working for Facebook) did a great job, finding the right balance between simplicity and features. For example there is no fancy styling solution (just plain CSS), no server-side rendering, but everything is well packaged and the developer experience is really good.\n\n### Axios\n\nThe {axios} library is the most used HTTP client.\n\nIt can work on both the client side (AJAX requests from the client) or on the server-side (HTTP requests in a Node.js environment)\n\nIts success may be related to Vue.js too, because a lot of Vue.js tutorials use it to query a distant API through HTTP.\n\n### Puppeteer\n\n{puppeteer} is one of the great stories of the year.\nMade by the Google Chrome team, it's a headless Chrome browser, that is to say a browser that runs in the background and that can be by piloted by code.\n\nIt can be used to do things like:\n\n* Automatically testing web application UIs in real browsers.\n* Taking snapshots of web pages to do server-side rendering.\n",
year:"2017"}}},{node:{relativePath:"2017/categories/all/fr.md",size:"1371",base:"fr.md",ext:".md",internal:{contentDigest:"0996e379022bd1918b57e359077153fa"},fields:{key:"categories.all",language:"fr",markdown:"Et le grand vainqueur de l'année 2017 est une nouvelle fois {vuejs} avec plus de 40 000 étoiles ajoutées sur GitHub.\n\nC'est beaucoup plus qu'en 2016 et l'écart avec le poursuivant {react} s'est accentué.\n\nNul ne pourra ignorer le succès de Vue en 2018 !\n\nMais quelles sont les raisons du succès de ce framework \"côté client\" ?\n\n* Tout d'abord un accès facile pour les nouveaux venus, une approche \"composant\" comme avec {react} mais avec une syntaxe facile à appréhender pour les débutants.\n* Un éco-système bien étudié avec des solutions claires pour des tâches telles que:\n  * Le routing entre les pages avec {vue-router}\n  * Le contrôle de l'état de l'application (_State management_) avec {vuex}\n* Le concept de fichier unique `.vue`: un fichier unique pour décrire un composant réutilisable: les balises HTML, le code JavaScript associé et leurs styles.\n* Inclus par défaut dans l'un des frameworks PHP les plus populaires [Laravel](https://laravel.com/)\n* Ce n'est pas le produit d'un géant de l'internet tel que Facebook ou Google, mais c'est un projet maintenu par [Evan You](https://github.com/yyx990803), avec une forte communauté \"open source\", en particulier du côté de la Chine.\n\nVue est utilisé par la plus grande plateforme de commerce électronique en Chine (Alibaba) mais aussi par des sociétés telles que Adobe or GitLab.\n",year:"2017"}}},{node:{relativePath:"2017/categories/all/ja.md",size:"46",base:"ja.md",ext:".md",internal:{contentDigest:"d136547e573015bd08d4ceb5a303c480"},fields:{key:"categories.all",language:"ja",markdown:"### まとめ\n\n### 2016 年 最優秀賞 🏆\n",year:"2017"}}},{node:{relativePath:"2017/categories/all/zh.md",size:"5204",base:"zh.md",ext:".md",internal:{contentDigest:"db44b6043c6e6a91ac39cc22581ee151"},fields:{key:"categories.all",language:"zh",markdown:"### Overview\n### 概览\n\nThese are the hottest projects of the year, all categories included.\n\n在这里我们列出了今年最火的项目, 不细分类别。\n\n### Vue.js strikes again\n### Vue.js蝉联冠军\n\nOnce again, {vuejs} is the trendiest project of the year, with more than 40,000 stars added on GitHub during the year.\n\n{vuejs}再次强势登顶年度排行榜冠军，今年在GitHub上新增了超过40,000的star。\n\nIt's far more than in 2016 (26,000 stars), and the gap with the next contender ({react}) is even bigger.\n\n相较于2016年(26,000Star)，今年Vue.js领先排行榜第2 ({react})的优势更大了。\n\nSo what makes Vue.js special?\n\n那么,是什么令Vue.js如此出众？\n\n\n* First, it has a small learning curve, with a component approach similar to {react} but with a more familiar syntax.\n\n* 首先，它有着平缓的学习曲线，与{react}相似的组件方案却更令人熟悉的语法。\n\n* The ecosystem is well defined, including a set of de-facto standards:\n* 设计优秀(well defined)的生态圈，例如一些既定标准(de-facto standards):\n\n  * Router: {vue-router}\n  * 路由: {vue-router}\n  \n  * State management library: {vuex}\n  * 状态管理库: {vuex}\n  \n* The concept of single-file component that includes template, logic and styles in a single file `.vue` file is really nice.\n* 把模板、逻辑和样式放入在一个`.vue`文件中的单文件设计理念十分友好。\n\n* It's used by one of the most popular PHP frameworks, [Laravel](https://laravel.com/), as its default view engine.\n* 被最流行的PHP框架之一--[Laravel](https://laravel.com/)选为默认的视图引擎(View engine)\n\n* It's not backed by a big company of the Internet like Facebook or Google but maintained by [Evan You](https://github.com/yyx990803) as an open-source project sponsored through crowd-sourcing.\n* 并非由Facebook或Googld这样的互联网巨头来主导，而是由[Evan You](https://github.com/yyx990803)个人维护，通过众筹方式来支持的开源项目。 \n\nAnd this may be related with the last point, but Vue.js is very popular among developers from China. It's used by the biggest e-commerce platform of China (Alibaba), but also by companies like GitLab or Adobe.\n\n也许正是上述最后一点的原因，Vue.js在中国拥有大量的拥趸。不仅被中国最大的电商平台阿里巴巴使用，也有Gitlab与Adobe这样的公司青睐。\n\n\n### React, 亚军, 再次！\n\nLike in 2016, {react} is number 2, with more than 27,000 stars added on GitHub (note that we're specifically talking about stars *added* over the year, not the *total* number of stars).\n\n与2016一样, {react}夺得第二名, 今年它在GitHub上获得了超过27,000star数量 (再次明确此处我们讨论的是整个年度*新增*的Stars数量而非*所有*的Star数量)。\n\n{create-react-app}, the third project, is the recommended way to start a new project with React, and its success made a lot of React boilerplates less relevant than before.\n\n{create-react-app}, 是排行榜的季军。它成为了新建React项目的首选推荐方式，它的成功让不少React样板(React boilerplates)与之前完全不一样。\n\n[Dan Abramov](https://github.com/gaearon) (the creator of {redux}, now working for Facebook) did a great job, finding the right balance between simplicity and features. For example there is no fancy styling solution (just plain CSS), no server-side rendering, but everything is well packaged and the developer experience is really good.\n\n[Dan Abramov](https://github.com/gaearon) ({redux}作者, 现在Facebook工作)做了一件了不起的事情, 他在简洁与功能性的平衡中找到了正确的方向(right balance)。 例如它没有花哨的样式解决方案(styling solution)(只有纯CSS)，以及无服务器端渲染, 但是一切又很好的封装了，同时开发者体验也很不错。\n\n### Axios\n\nThe {axios} library is the most used HTTP client.\n\n{axios} 库是最广泛使用的HTTP客户端。\n\n\nIt can work on both the client side (AJAX requests from the client) or on the server-side (HTTP requests in a Node.js environment)\n\n它能同时在用户端(在用户端发起AJAX请求)与服务器端(在Node.js环境中)使用。\n\nIts success may be related to Vue.js too, because a lot of Vue.js tutorials use it to query a distant API through HTTP.\n\nAxios的成功或许也与Vue.js有些关系，因为诸多Vue.js教程中用到了它来发起远程API的HTTP请求。\n\n### Puppeteer\n\n{puppeteer} is one of the great stories of the year.\n\n{puppeteer}是今年的大事件之一。\n\nMade by the Google Chrome team, it's a headless Chrome browser, that is to say a browser that runs in the background and that can be by piloted by code.\n\n它是Google Chrome团队开发的一个无界面Chrome浏览器，也就是说你可以使用代码在后台控制浏览器了。\n\nIt can be used to do things like:\n\n它可作如下用途:\n\n* Automatically testing web application UIs in real browsers.\n\n* 在真正的浏览器(real browsers)中进行自动化界面测试(UI测试)。\n\n* Taking snapshots of web pages to do server-side rendering.\n\n* 对服务器端渲染的页面进行截图。\n",year:"2017"}}},{node:{relativePath:"2017/categories/build/en.md",size:"1543",base:"en.md",ext:".md",internal:{contentDigest:"9f9c1e0ac25f84ea310c8afda30273b5"},fields:{key:"categories.build",language:"en",markdown:'It\'s maybe the biggest surprise of the year, the trendiest building tool is {parcel}, a brand new project that gathered more than 14,000 stars since the project was launched on GitHub in August.\n\n{parcel} offers all the goodies of modern web development with a killer feature: zero configuration!\n\nThat\'s the main difference with {webpack}, that relies on a whole ecosystem of plugins called "loaders".\n\nDo not misunderstand the numbers, {webpack} is still the most popular bundler for modern applications, with a total of 35,000 stars on GitHub and more than 500 contributors.\n\nA lot of projects use it under the hood, including {create-react-app} and {gatsby}, 2 of the most popular projects of the year.\n\n{webpack} keeps on evolving, the version 2 lets developers implement features like "code splitting" very easily, through dynamic imports.\n\nWhile {webpack} and {parcel} both target the building process of web **applications**, {rollup} targets **libraries**. It focuses on performance by taking advantage of ES6 modules.\n\n{rollup} is used by some major libraries and it\'s worth to mention that the {react} team migrated their build system from {browserify} to {rollup} in 2017.\n\nFrom the [React blog](https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html)\n\n> Rollup is a perfect fit for libraries like React that can be pre-built and then integrated into apps.\n\n{poi} has the same goal as {parcel}: a build tool for modern web applications, but its scope is limited to {react}, {preact} and {vuejs} projects.\n',year:"2017"}}},{node:{relativePath:"2017/categories/build/fr.md",size:"1527",base:"fr.md",ext:".md",internal:{contentDigest:"e1f80ce337ebfa0ff8ac3c52a5b981ae"},fields:{key:"categories.build",language:"fr",markdown:"Pour construire une application web moderne, les développeurs ont besoin d'un outil capable d'assembler et de transformer diverses parties (_templates_, code JavaScript écrit dans un dialecte donné, styles...) et d'optimiser le tout dans le but de rendre l'application web performante. Ce sont ces outils de construction que nous analysons ici.\n\nLa plus grosse surprise de l'année est l'arrivée de {parcel} qui détrône {webpack}, le roi incontesté de la catégorie.\n\nLancé en août 2017, {parcel} a connu un départ fulgurant avec 14 000 étoiles ajoutées sur GitHub en l'espace de quelques mois.\n\nAlors que {webpack} est basé sur tout un éco-système d'extensions appelées _loaders_, parcel promet un usage extrêmement simple, sans aucune configuration nécessaire.\n\nNe faisons pas dire à ces chiffres ce qu'ils ne disent pas, {webpack} reste extrêmement populaire et est inclus par de nombreux autres projets, en particulier {gatsby} et {create-react-app}.\n\nAlors que {parcel} et {webpack} ciblent les développeurs d'applications web, {rollup}, cible les créateurs de \"librairies\".\n\nC'est ainsi que les créateurs de {react} ont migré leur processus de construction de {browserify} vers {rollup} en 2017, comme expliqué dans [cet article issu du site officiel](https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html).\n\nTout comme {parcel}, {poi} mise sur une grande simplicité d'usage mais ne concerne (pour l'instant) que les projets créés avec {react}, {vuejs} ou {preact}.\n",year:"2017"}}},{node:{relativePath:"2017/categories/build/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.build",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/build/zh.md",size:"2962",base:"zh.md",ext:".md",internal:{contentDigest:"653731b60dafa1872e6557acdb56ba1a"},fields:{key:"categories.build",language:"zh",markdown:'It\'s maybe the biggest surprise of the year, the trendiest building tool is {parcel}, a brand new project that gathered more than 14,000 stars since the project was launched on GitHub in August.\n\n构建工具排行冠军是{parcel}，这或许是今年最大的惊喜，一个8月份才在GitHub上发布的崭新项目却已经得到了14,000个star的关注度。\n\n{parcel} offers all the goodies of modern web development with a killer feature: zero configuration!\n\n{parcel}提供了现代浏览器开发所有的优点并杀手级的应用：零配置！\n\nThat\'s the main difference with {webpack}, that relies on a whole ecosystem of plugins called "loaders".\n\n这是它与{webpack}最大的区别，that relies on a whole ecosystem of plugins called "loaders"。\n\nDo not misunderstand the numbers, {webpack} is still the most popular bundler for modern applications, with a total of 35,000 stars on GitHub and more than 500 contributors.\n\n请别误解数字，{webpack}依然是最流行的构建应用，它在Github上有35,000 stars总数和超500人的贡献者。\n\nA lot of projects use it under the hood, including {create-react-app} and {gatsby}, 2 of the most popular projects of the year.\n\n目前有许多项目使用了它，包括今年最流行的两个项目：{create-react-app}和{gatsby}。\n\n{webpack} keeps on evolving, the version 2 lets developers implement features like "code splitting" very easily, through dynamic imports.\n\n{webpack}继续迭代更新, 在新的2.0版本中通过动态载入的方式，开发者可以十分容易地实现“代码分解”这样的功能。\n\nWhile {webpack} and {parcel} both target the building process of web **applications**, {rollup} targets **libraries**. It focuses on performance by taking advantage of ES6 modules.\n\n正当{webpack}与{parcel}同时定位于网络构建服务的**应用**时, {rollup} 则定位于 **库**。它专注于ES6模块的性能提升上。\n\n\n{rollup} is used by some major libraries and it\'s worth to mention that the {react} team migrated their build system from {browserify} to {rollup} in 2017.\n\n{rollup}已被一些主流的库使用，并且值得一提的是{react}团队也在2017年把它们的构建系统从{browserify}切换到了{rollup}。\n\n\nFrom the [React blog](https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html)\n\n在[React博客](https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html)中提到\n\n> Rollup is a perfect fit for libraries like React that can be pre-built and then integrated into apps.\n> Rollup 可以预编译并且集成到应用中，是可以与类似React的库做到完美配合。\n\n{poi} has the same goal as {parcel}: a build tool for modern web applications, but its scope is limited to {react}, {preact} and {vuejs} projects.\n\n{poi} 与{parcel}有同样的目标: 一款现代网络应用构建工具，但它的领域仅限于{react}, {preact}与{vuejs}项目。\n',year:"2017"}}},{node:{relativePath:"2017/categories/compiler/en.md",size:"1155",base:"en.md",ext:".md",internal:{contentDigest:"3fc9874125fe01923f3b9c0145f6efe7"},fields:{key:"categories.compiler",language:"en",markdown:'Here we talk about languages that compile to regular JavaScript code.\n\nYou may need such a compiler in your building workflow for 2 reasons:\n\n* You want to enjoy all feature of the latest version of the JavaScript language (ES7) while making your code compatible with a maximum of Web browsers. This feature made the success of {babel}, which a lot of projects depend on.\n* You want to add new features to the language... such as "type checking".\n\nOne of the hottest questions that divide developers is: types or not types?\n\nJavaScript has basic dynamic types but not static types. A lot of developers feel like they need types in their code, especially in big code base, to make it more robust and easier to read/understand.\n\nAnd then, if you think you need types, the 2 main contenders are: {typescript}, provided by MicroSoft and {flow}, provided by Facebook (and used on their main projects: {react}, {react-native}, {jest}...)\n\nRead this article from [James Kyle](https://github.com/thejameskyle) to understand the difference: [A Comparison Between Adopting Flow or TypeScript](https://medium.com/the-thinkmill/adopting-flow-typescript-3549a3a36d51)\n',year:"2017"}}},{node:{relativePath:"2017/categories/compiler/fr.md",size:"1563",base:"fr.md",ext:".md",internal:{contentDigest:"77d512e8c7cb88ef441bb3c0b16e9ef0"},fields:{key:"categories.compiler",language:"fr",markdown:"Les \"compileurs\" de cette catégorie sont des outils qui transforment du code écrit dans un langage donné en code JavaScript standard, capable de s'exécuter dans un navigateur Web.\n\nOn peut avoir besoin d'un tel compileur pour 2 raisons:\n\n* Pour profiter des dernières avancées du langage JavaScript (spécifications ES6 et ES7) tout en produisant du code compatible avec la majorité des navigateurs web. C'est ce qui fait le succès de {babel}, utilisé par un très grand nombre de projets Web.\n* Pour ajouter de nouvelles fonctionnalités au langage, en particulier les \"types statiques\" qui existent dans des langages institutionnels tels que Java ou C#.\n\nLe langage JavaScript ne propose que des types \"dynamiques\", cette flexibilité peut poser problème, en particulier dans le cadre de gros projets.\n\nDans le but d'offrir aux développeurs web le confort et la sécurité des \"types statiques\", 2 concurrents s'opposent farouchement: {typescript}, créé par MicroSoft et {flow}, créé par Facebook, et utilisé en interne par Facebook sur de nombreux projets.\n\n{typescript}, largement en tête en 2016, conserve l'avantage sur son rival en 2017.\nDe nombreux projets utilisent {typescript}, à commencer par {angular-2} et l'intégration facile avec l'éditeur de texte {vs-code} joue en sa faveur.\n\nPour mieux comprendre les différences, nous vous recommandons cet article de [James Kyle](https://github.com/thejameskyle): [A Comparison Between Adopting Flow or TypeScript](https://medium.com/the-thinkmill/adopting-flow-typescript-3549a3a36d51)\n",year:"2017"}}},{node:{relativePath:"2017/categories/compiler/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.compiler",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/compiler/zh.md",size:"2312",base:"zh.md",ext:".md",internal:{contentDigest:"46790bb6b5ac0ffea6bdb7c764c14921"},fields:{key:"categories.compiler",language:"zh",markdown:'Here we talk about languages that compile to regular JavaScript code.\n\n在这里我们将讨论那些编译到标准JavaScript代码的语言。\n\nYou may need such a compiler in your building workflow for 2 reasons:\n\n通常，在你的构建工作流(building workflow)中需要编译器可能有2个原因：\n\n* You want to enjoy all feature of the latest version of the JavaScript language (ES7) while making your code compatible with a maximum of Web browsers. This feature made the success of {babel}, which a lot of projects depend on.\n* 你想享受到最新JavaScript(ES7标准)的特性，并把它应用到尽可能多的网页浏览器中。这个需求让{babel}获得了成功，很多项目都依赖于它。\n\n* You want to add new features to the language... such as "type checking".\n* 你想为语言添加新的特性……比如“类型检查(type checking)”。\n\nOne of the hottest questions that divide developers is: types or not types?\n\n有一个很热门的问题可以来区分程序员： 你用类型的，还是不用类型的？\n\nJavaScript has basic dynamic types but not static types. A lot of developers feel like they need types in their code, especially in big code base, to make it more robust and easier to read/understand.\n\nJavaScript本身带有基本的动态类型，但缺乏静态类型。不过很多开发者喜欢在代码中使用类型，尤其在大型项目中，这样可以让代码变得更为健壮（robust）且易于阅读和理解。\n\nAnd then, if you think you need types, the 2 main contenders are: {typescript}, provided by MicroSoft and {flow}, provided by Facebook (and used on their main projects: {react}, {react-native}, {jest}...)\n\n如果你需要类型，有两个主流可选项：微软的{typescript}和Facebook的{flow}（Facebook在它们的主要项目{react}, {react-native}, {jest}...中有使用)\n\nRead this article from [James Kyle](https://github.com/thejameskyle) to understand the difference: [A Comparison Between Adopting Flow or TypeScript](https://medium.com/the-thinkmill/adopting-flow-typescript-3549a3a36d51)\n\n你可以从[James Kyle](https://github.com/thejameskyle)的文章来感受两者的区别: [A Comparison Between Adopting Flow or TypeScript](https://medium.com/the-thinkmill/adopting-flow-typescript-3549a3a36d51)\n',year:"2017"}}},{node:{relativePath:"2017/categories/css-in-js/en.md",size:"1710",base:"en.md",ext:".md",internal:{contentDigest:"dabe0a0727c54041395a5d847fe1f329"},fields:{key:"categories.css-in-js",language:"en",markdown:'There is still no consensus about the best way to style React components.\n\nYou can use a ready-made component toolkit like {material-ui} or {ant-design} if your needs are pretty "standard" and you don\'t need too much customization.\n\nOr, if you need more flexibility, you can do it the "old way", using global CSS styles from a popular CSS toolkit like {bootstrap} or {bulma}, and assigning appropriate `className`s to your components. But then your component is not  self-contained anymore, since its style is being managed elsewhere.\n\nTo address this issue, the "CSS in JavaScript" category has emerged.\n\nThe concept is simple: with React you already manage **both** your component logic and its template using JavaScript. Why not go further and encapsulate the styles in your components, using JavaScript for styling too?\n\n{styled-components} was by far the trendiest project in this category this year. It lets developers include regular CSS syntax inside the React components, using a recent addition to the JavaScript language: tagged template literals.\n\n{css-modules}, number 2 in this category, adopts a more hybrid approach. It lets developers write styles in the language of their choice (regular CSS, Sass, {less}, {stylus}), using files that are located next to the related components and that are **imported** into the components\n\n[Mark Dalgleish](http://markdalgleish.com/), one of the authors of {css-modules}, wrote one of the most interesting articles about the CSS-in-JavaScript approach: [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660). This article is highly recommended for people who might be somewhat skeptical about this new technique.\n',year:"2017"}}},{node:{relativePath:"2017/categories/css-in-js/zh.md",size:"3146",base:"zh.md",ext:".md",internal:{contentDigest:"48b364e46c58be7a755020e36cd855cf"},fields:{key:"categories.css-in-js",language:"zh",markdown:'There is still no consensus about the best way to style React components.\n\n目前仍然没有对React组件样式进行有效管理的最佳实践。\n\nYou can use a ready-made component toolkit like {material-ui} or {ant-design} if your needs are pretty "standard" and you don\'t need too much customization.\n\n如果只是想要无需太多自定义的标准样式，可以用{material-ui}或{ant-design}这样现成的组件工具包。\n\nOr, if you need more flexibility, you can do it the "old way", using global CSS styles from a popular CSS toolkit like {bootstrap} or {bulma}, and assigning appropriate `className`s to your components. But then your component is not  self-contained anymore, since its style is being managed elsewhere.\n\n或者，如果需要更高度灵活的自定义，你仍然能使用传统方式：用一个像{bootstrap}或{bulma}这样的全局CSS样式，通过修改组件的 `className`属性来达到目的。这样做缺点是你的组件无法进行自我配置管理，需在其它地方进行设置。\n\nTo address this issue, the "CSS in JavaScript" category has emerged\n\n本类别"CSS in JavaScript"的出现即是为了解决上述问题，\n\nThe concept is simple: with React you already manage **both** your component logic and its template using JavaScript. Why not go further and encapsulate the styles in your components, using JavaScript for styling too?\n\n概念本身很简单：在React中你己能通过JavaScript来**同时**控制逻辑和模板部分。既然如此，为不再进一步，连样式也一起管理了呢？\n\n{styled-components} was by far the trendiest project in this category this year. It lets developers include regular CSS syntax inside the React components, using a recent addition to the JavaScript language: tagged template literals.\n\n{styled-components}是今年本类别的冠军。它利用JavasScript最近新加入的模板字符串特性，让开发者在React组件中使用标准的CSS语法。\n\n{css-modules}, number 2 in this category, adopts a more hybrid approach. It lets developers write styles in the language of their choice (regular CSS, Sass, {less}, {stylus}), using files that are located next to the related components and that are **imported** into the components\n\n{css-modules}, 作为本类别的亚军, 则采用了混合的解决方案。 它让开发者自己挑选(标准CSS, Sass, {less}, {stylus})，再以文件的方式**导入**到组件中\n\n[Mark Dalgleish](http://markdalgleish.com/), one of the authors of {css-modules}, wrote one of the most interesting articles about the CSS-in-JavaScript approach: [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660). This article is highly recommended for people who might be somewhat skeptical about this new technique.\n\n[Mark Dalgleish](http://markdalgleish.com/), {css-modules}的作者, 写了一篇有意思的文章来阐述CSS-in-JavaScript解决方案: [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660). 如果你对CSS-in-Javascript解决方案持怀疑态度的话，那此文不容错过。\n',year:"2017"}}},{node:{relativePath:"2017/categories/framework/en.md",size:"1525",base:"en.md",ext:".md",internal:{contentDigest:"5e9a2d80f46615a91c6e3398478dea56"},fields:{key:"categories.framework",language:"en",markdown:'The "front-end framework" category has been a battlefield for a while, but it seems that things are finally calming down, with 3 big players dominating the game.\n\n### The Big-3: Vue, React and Angular\n\nWithout surprise, the 3 most popular UI frameworks are {vuejs}, {react} and {angular-2}\n\nIt\'s common to call these _frameworks_ but, to be more accurate, the only framework is {angular-2}, and we should call {vuejs} and {react} _libraries_.\n\nWe talked previously about the success of {vuejs} and its integrated approach.\n\nBy opposition, the {react} landscape is still fragmented, and developers have to make more deliberate choices about all the things that go around the view layer:\n\n* Routing between pages.\n* How to fetch data.\n* How to bind forms to data.\n* How store the state of the application.\n\nOn the contrary, the {angular-2} ecosystem is more controlled, more stable. There is an _Angular Way_ to do things.\n\nThat\'s probably partly why {angular-2} has a more "corporate" image. And this image has been emphasized with the usage of static types using {typescript}, which resonates with backend developers familiar with types from languages like C# or Java.\n\n## Less is more\n\nBehind the Big-3, it\'s very interesting to notice that {preact} is number 4.\n{preact} is a smaller alternative to {react}: the same API, but in less than 3KB.\n\nSimilar, most other contenders in this category emphasize a small footprint that leads to better performance in the browser in order to differentiate themselves from the big 3. \n',year:"2017"}}},{node:{relativePath:"2017/categories/framework/fr.md",size:"1072",base:"fr.md",ext:".md",internal:{contentDigest:"6545face556a31e3597402b175c9ad1c"},fields:{key:"categories.framework",language:"fr",markdown:"La catégorie des \"Frameworks côté client\" est traditionnellement la catégorie reine, cette année aussi la bataille fut intense entre les tous les prétendants.\n\n3 grands acteurs se disputent les faveurs des développeurs dans cette catégorie: {vuejs}, {react} et {angular-2}\n\nNous avons vu précédemment ce qui faisait le succès de {vuejs}.\n\nReact a un éco-système beaucoup plus fragmenté, laissant au développeur la liberté de créer une solution \"à la carte\" pour les questions suivantes: routing entre les pages, accès aux données depuis des API distantes, contrôle de l'état de l'application...\n\nA l'opposé {angular-2} propose une approche beaucoup plus systématique, car c'est un framework complet, on dit souvent qu'il y existe une \"manière Angular\" de faire les choses.\n\nC'est la raison pour laquelle {angular-2} remporte un grand succès dans le monde de l'entreprise.\nCe succès est renforcé par l'utilisation par le framework du langage {typescript}, qui introduit les \"types\" chers aux développeurs Java et C# dans le langage JavaScript.\n",year:"2017"}}},{node:{relativePath:"2017/categories/framework/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.framework",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/framework/zh.md",size:"2900",base:"zh.md",ext:".md",internal:{contentDigest:"92be8aeff9d5faa976b000859b0d8e40"},fields:{key:"categories.framework",language:"zh",markdown:'The "front-end framework" category has been a battlefield for a while, but it seems that things are finally calming down, with 3 big players dominating the game.\n\n前端框架方面向来是兵家必争之地，不过如今已呈三家鼎足分立，大局尘埃落定之势。\n\n### The Big-3: Vue, React and Angular\n### Vue、React、Angular三足鼎立\n\nWithout surprise, the 3 most popular UI frameworks are {vuejs}, {react} and {angular-2}\n\n毫不奇怪，目前三大UI框架分别是{vuejs}, {react}和{angular-2}。\n\nIt\'s common to call these _frameworks_ but, to be more accurate, the only framework is {angular-2}, and we should call {vuejs} and {react} _libraries_.\n\n我们习惯称之为_框架_，但准确地讲，只有{angular-2}是 _框架_， {vuejs}和{react}应归类为 _库_。\n\nWe talked previously about the success of {vuejs} and its integrated approach.\n\n前文中，我们已经分析了{vuejs}的成功因素和它的集成方案。\n\nBy opposition, the {react} landscape is still fragmented, and developers have to make more deliberate choices about all the things that go around the view layer:\n\n与Vue.js相对应的，{react}方面却依然处于碎片化的状态，开发者需要根据自身项目的情况，进行技术选型：\n\n* Routing between pages.\n* 在页面间的路由切换问题。\n* How to fetch data.\n* 如何获取数据。\n* How to bind forms to data.\n* 如何把数据绑定到表单。\n* How store the state of the application.\n* 如何存储应用的状态。\n\nOn the contrary, the {angular-2} ecosystem is more controlled, more stable. There is an _Angular Way_ to do things.\n\n相反，{angular-2}生态圈则更可控也更稳定。还有一种叫_Angular准则_ 的最佳实践用来指导开发。\n\nThat\'s probably partly why {angular-2} has a more "corporate" image. And this image has been emphasized with the usage of static types using {typescript}, which resonates with backend developers familiar with types from languages like C# or Java.\n\n这可能给人一种{angular-2}对于多人协同工作更友好的印象。此外，随着支持静态类型的{typescript}加入，{angular-2}也势必能得到更多熟悉C#或Java的后端开发人员人观注与青睐。\n\n## Less is more\n## 少即是多\n\nBehind the Big-3, it\'s very interesting to notice that {preact} is number 4.\n\n在三巨头之后，有趣地注意到第四名 {preact}.\n\n{preact} is a smaller alternative to {react}: the same API, but in less than 3KB.\n\n{preact}是一个{react}的小型替代解决方案：有同样的API，却只有3KB的大小。\n\nSimilar, most other contenders in this category emphasize a small footprint that leads to better performance in the browser in order to differentiate themselves from the big 3. \n\n类似的还有许多竞争者，为了区别于三巨头，它们更多地在浏览器的性能上下功夫，做出自己的特色。\n',year:"2017"}}},{node:{relativePath:"2017/categories/graphql/en.md",size:"24",base:"en.md",ext:".md",internal:{contentDigest:"5555608528d311dc16de00403be34712"},fields:{key:"categories.graphql",language:"en",markdown:"This is a new category!\n",year:"2017"}}},{node:{relativePath:"2017/categories/graphql/zh.md",size:"37",base:"zh.md",ext:".md",internal:{contentDigest:"ced371a1818bc7378456fed326f493bf"},fields:{key:"categories.graphql",language:"zh",markdown:"这是今年新增的一个分类。\n",year:"2017"}}},{node:{relativePath:"2017/categories/ide/en.md",size:"877",base:"en.md",ext:".md",internal:{contentDigest:"7cb7d6ef392a3c12e722400641d27e99"},fields:{key:"categories.ide",language:"en",markdown:"Here we talk about the text editors from open source and built with web technologies (sorry for Sublime users!).\n\nIn 2016, {vs-code}, backed by MicroSoft and {atom}, backed by GitHub were really close at the top of the category.\n\nThey also led the way in 2017 but {vs-code} took a big advantage over its rival.\n\nEvery month, a new version of {vs-code} is released bringing, more and more helpful features to the IDE, without sacrificing performance too much.\nOut of the box, without installing anything, you have a great set of features:\n\n* Git integration\n* Autocomplete for a lot of things: JavaScript syntax, local file paths when you `require` or `import` a module, NPM packages names...\n* React syntax integration\n\nIf you add {prettier} to the mix, asking the editor to automatically format your files every time you save, you have the perfect combo to enjoy code poetry!\n",year:"2017"}}},{node:{relativePath:"2017/categories/ide/fr.md",size:"1147",base:"fr.md",ext:".md",internal:{contentDigest:"6c2acbc8efc31920a560666cdeb355a2"},fields:{key:"categories.ide",language:"fr",markdown:"Nous parlons ici des éditeurs de texte issues de projets open-source et utilisant des technologies web (désolé pour les utilisateurs de Sublime !).\n\n{vscode}, créé par MicroSoft et {atom}, créé par GitHub, sont 2 applications construites à partir d'{electron} une plateforme très populaire pour le développement d'applications _desktop_ pour Windows aussi bien que pour MacOS.\n\nLes 2 projets étaient au coude-à-coude en 2016 mais {vscode} a pris un avantage déterminant en 2017.\n\n{vscode} progresse très vite, chaque mois apporte son lot d'innovations.\n\nSans devoir installer aucune extension, les développeurs disposent de toutes les fonctionnalités dont ils ont besoin:\n\n* Integration avec Git\n* Saisie assistée pour beaucoup de choses: le language JavaScript bien sûr, mais aussi les noms de fichiers en local, les noms de package installés depuis NPM...\n* Syntaxe React prise en compte\n* Ligne de commande intégrée\n\nSi on ajoute {prettier} à {vscode} et en activant l'option pour formatter automatiquement le code à chaque enregistrement, on obtient la combinaison parfaite pour écrire du code dans un confort absolu !\n",year:"2017"}}},{node:{relativePath:"2017/categories/ide/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.ide",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/ide/zh.md",size:"1715",base:"zh.md",ext:".md",internal:{contentDigest:"692a836712800e6422b264261274a446"},fields:{key:"categories.ide",language:"zh",markdown:"Here we talk about the text editors used by developers, open source and built with web technologies (sorry for Sublime users!).\n\n这里我们讨论的是利用开源的网络技术来开发的文本编辑器（Sublime粉们对不住了！）。\n\nIn 2016, {vs-code}, backed by MicroSoft and {atom}, backed by GitHub were really close at the top of the category.\n\n在2016年, 由微软主导的{vs-code}与GitHub主导的{atom}在本类别中齐头并进。\n\nThey also led the way in 2017 but {vs-code} took a big advantage over its rival.\n\n今年他们也依然处于领先地位，不过在互相较量中，{vs-code}己领先它的对手一大截。\n\nEvery month, a new version of {vs-code} is released bringing, more and more helpful features to the IDE, without sacrificing performance too much.\n\n每个月{vs-code}都会发布一个新的版本，带来更多实用的IDE功能，并且在性能上没有太大的损耗。\n\nOut of the box, without installing anything, you have a great set of features:\n\n即使不安全任何插件，你也有一大堆开箱即用的功能：\n\n* Git integration\n* Git集成功能\n* Autocomplete for a lot of things: JavaScript syntax, local file paths when you `require` or `import` a module, NPM packages names...\n* 自动补全: JavaScript语法, 当你想`require` 或 `import`一个模块时能对本地文件路径进行补全, NPM包名字...等等\n* React语法集成\n\nIf you add {prettier} to the mix, asking the editor to automatically format your files every time you save, you have the perfect combo to enjoy code poetry!\n\n此外，你可以在编辑器中添加{prettier}插件，这样每次保存时它都会自动格式化文件，享受美妙无比的编程。\n",
year:"2017"}}},{node:{relativePath:"2017/categories/mobile/en.md",size:"678",base:"en.md",ext:".md",internal:{contentDigest:"297f06c56303cfd364817722854e05f7"},fields:{key:"categories.mobile",language:"en",markdown:'JavaScript is so versatile that it can also be used to build mobile applications, meaning that you can share components between the web and the mobile platforms.\n\nIn this category, we find again the 3 main actors of the "Front-end frameworks":\n\n* React with {react-native}\n* Vue with {weex} and {quasar}\n* Angular with {ionic} and {nativescript}\n\nLike in 2016, {react-native} is the trendiest solution, based on JavaScript, to build a native application, whether it\'s for iOS, Android or Windows systems.\n\nAs highlighted in this video [Cross platform apps with React Native](https://www.youtube.com/watch?v=1cI-978DHaA), the promise: "Write Once, Run Everywhere" was fulfilled!\n',year:"2017"}}},{node:{relativePath:"2017/categories/mobile/fr.md",size:"755",base:"fr.md",ext:".md",internal:{contentDigest:"5ac804aca62831deef7a26748582c611"},fields:{key:"categories.mobile",language:"fr",markdown:"La polyvalence de JavaScript est telle que l'on peut construire de réelles applications mobiles avec des technologies web.\n\nOn retrouve dans cette catégorie le clivage entre les 3 acteurs dominants des frameworks côté client:\n\n* React avec {react-native}\n* Vue avev {weex} et {quasar}\n* Angular avec {ionic} et {nativescript}\n\nComme en 2016, {react-native} s'impose comme la solution la plus populaire pour construire une application mobile pour toutes les plateformes (iOS, Android et Windows Mobile), à partir de JavaScript.\n\nComme le montre cette video très complète intitulée [Cross platform apps with React Native](https://www.youtube.com/watch?v=1cI-978DHaA), le slogan: \"Un seul code pour toutes les plateformes\" est devenu une réalité !\n",year:"2017"}}},{node:{relativePath:"2017/categories/mobile/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.mobile",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/mobile/zh.md",size:"1295",base:"zh.md",ext:".md",internal:{contentDigest:"cdb43d6e88faee94fa3f7122a669e06a"},fields:{key:"categories.mobile",language:"zh",markdown:'JavaScript is so versatile that it can also be used to build mobile applications, meaning that you can share components between the web and the mobile platforms.\n\nJavaScript是如此的万能，它也能用来构建移动应用。这意为着你可以在网页与移动平台中复用你的组件。\n\nIn this category, we find again the 3 main actors of the "Front-end frameworks":\n\n在本分类中，我们为3大前端框架找到了对应的解决方案：\n\n* React with {react-native}\n* React:{react-native}\n* Vue with {weex} and {quasar}\n* Vue：{weex} 和 {quasar}\n* Angular with {ionic} and {nativescript}\n* Angular：{ionic} 和 {nativescript}\n\nLike in 2016, {react-native} is the trendiest solution, based on JavaScript, to build a native application, whether it\'s for iOS, Android or Windows systems.\n\n与2016年一样，{react-native}也是今年的第一名，把JavaScript编译成原生的APP应用，iOS、安卓或Windows系统。\n\nAs highlighted in this video [Cross platform apps with React Native](https://www.youtube.com/watch?v=1cI-978DHaA), the promise: "Write Once, Run Everywhere" was fulfilled!\n\n正如这个视频[使用React Native来跨平台编译APP](https://www.youtube.com/watch?v=1cI-978DHaA)中的口号：“一次编写，到处运行”可谓名副其实！\n',year:"2017"}}},{node:{relativePath:"2017/categories/nodejs-framework/en.md",size:"1422",base:"en.md",ext:".md",internal:{contentDigest:"5cb1a15f6b9768aa500cfe8d01112aa1"},fields:{key:"categories.nodejs-framework",language:"en",markdown:"Of course JavaScript is no more limited to the front-end side of web applications, it's more and more used to create the back-end too, and [Mikeal Rogers](https://github.com/mikeal), an influent member of the node.js community, predicts that [Node.js Will Overtake Java Within a Year](https://thenewstack.io/open-source-profile-mikeal-rogers-node-js/).\n\nBut unlike other languages where de-facto standards have emerged over the years (think about Ruby on Rails for Ruby, Django for Python or Laravel for PHP), there is no golden standard or recommended architecture when you want to create a new node.js server.\n\nDespite its age, {express} was not only the trendiest node.js framework in 2017 but it's also used as the backbone of many other frameworks or CMS, including {feathers}, {keystone} or {nest}.\n\nIt seems that Express minimalist approach perfectly matches the micro-services trend that promotes the creation of several decoupled smaller applications over the development of a single \"monolith\" application.\n\nCompared to last year, 3 newcomers joined the TOP 10 node.js frameworks:\n\n* {fastify} is built as a general-purpose web framework, inspired by {hapi}, but is well suited to building fast JSON-based HTTP APIs.\n* {serverjs} aims to be a ‘everything works out of the box’ experience.\n* {nest} feature an architecture familiar to Angular developers, made of modules and controller, written in TypeScript\n",year:"2017"}}},{node:{relativePath:"2017/categories/nodejs-framework/fr.md",size:"1264",base:"fr.md",ext:".md",internal:{contentDigest:"4bc08ba47c2ca9a77495ef8fac1f77bb"},fields:{key:"categories.nodejs-framework",language:"fr",markdown:"Côté serveur également, JavaScript a une place de plus en plus importante.\n\n[Mikeal Rogers](https://github.com/mikeal), un membre influent de la communauté Node.js, predit que [Node.js va dépasser Java dans 1 an](https://thenewstack.io/open-source-profile-mikeal-rogers-node-js/).\n\nMais contrairement à des langages tels que PHP (avec Laravel), Ruby (avec Ruby on Rails) ou Python (avec Django), il n'existe pas de réel framework Node.js dominant ou d'architecture recommandée au moment de créer une nouvelle application serveur.\n\nMalgré son âge, {express} est resté en 2017 le framework Node.js le plus populaire.\nQui plus est, il est utilisé en interne par de très nombreux projets tels que {feathers}, {keystone} or {nest}.\n\nRemarquons l'arrivée de 3 nouveaux venus dans le classement cette année:\n\n* {fastify} inspiré by {hapi}, propose une approche complète et convient très bien au développment d'API au format JSON, API dont sont friandes les applications web modernes.\n* {serverjs} est une solution qui propose d'emblée toutes les fonctionnalités d'un serveur web\n* {nest} se différentie en proposant une architecture familière aux développeurs Angular, faites de \"modules\" et de \"controlleurs\" écrits dans le langage TypeScript.\n",year:"2017"}}},{node:{relativePath:"2017/categories/nodejs-framework/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.nodejs-framework",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/nodejs-framework/zh.md",size:"13",base:"zh.md",ext:".md",internal:{contentDigest:"9680b418c55ecea5eee7c8aea2a74fb1"},fields:{key:"categories.nodejs-framework",language:"zh",markdown:"暂时空白\n",year:"2017"}}},{node:{relativePath:"2017/categories/react/en.md",size:"1297",base:"en.md",ext:".md",internal:{contentDigest:"63802cdc5b123803d4d5cb58d1582afc"},fields:{key:"categories.react",language:"en",markdown:'The {react} library being only the view layer, it creates space for a whole ecosystem that is moving very fast.\n\nIn 2016 {create-react-app} solved the problem of how to start coding a React application by providing a nice set of presets, very well packaged. Facebook keeps releasing new versions very often and it was by far the most popular project in 2017 among the React ecosystem.\n\nAs an example of its success, we could mention [StackBlitz](https://stackblitz.com/), an online IDE that lets you run application created from {create-react-app}, right from the browser, in a few seconds.\n\nBut even if {create-react-app} is often considered as the default "starter kit" for React, developers may need more opinionated starter kits: {react-boilerplate} was the most popular project in this category, providing a lot of feature like the GraphQL integration.\n\n{ant-design}, {ant-design-pro} and {material-ui} are sets of styled React components to help developers create web application with React components, without worrying about the styling.\n\nAt position number 10, {recompose}\'s popularity denotes one of the features seasoned developers love about React: its "functional" approach, everything is just a function and {recompose} provides a full set of helpers to go further in this direction.\n',year:"2017"}}},{node:{relativePath:"2017/categories/react/fr.md",size:"1639",base:"fr.md",ext:".md",internal:{contentDigest:"2b4ee1e97961142ef28aaf8bd01bb104"},fields:{key:"categories.react",language:"fr",markdown:"Comme le domaine de {react} est limité à la partie visuelle des applications (la partie \"vue\" mais ce mot prête à confusion à cause du projet {vuejs} !), cela libère de la place pour tout un éco-système de projets qui fonctionnent avec React.\n\nEn 2016, {create-react-app} a résolu un problème récurrent: quel point de départ pour créer une nouvelle application avec React ?\n\nCe projet est très fréquemment mis à jour par Facebook et s'impose comme la manière quasi officielle de démarrer un nouveau projet. Comme une preuve supplémentaire de son succès, [StackBlitz](https://stackblitz.com/) est un éditeur de texte en ligne qui permet de créer instantanément une application à partir de {create-react-app}.\n\nPour les développeurs qui recherchent plus de fonctionnalités, une solution telle que {react-boilerplate} offre toutes les joyeusetés d'une application moderne, y compris une couche \"GraphQL\" et la possibilité de fonctionner en local, en mode _offline_.\n\nParmi les autres projets du classement, on trouve des jeux de composants déjà stylés tels que {ant-design}, {ant-design-pro} ou {material-ui} qui permettent aux développeurs d'obtenir aisément une application web avec un joli rendu, qui donne une allure professionnelle (à défaut d'être originale sans doute !).\n\nEn position numéro 10, le projet {recompose} nous montre l'importance des motifs de programmation fonctionnelle (_Functional Programming_), motifs qui font une partie du succès de React. Tout peut se traduire par une simple fonction et {recompose} propose un ensemble d'outils pour prolonger le voyage dans cette direction.\n",year:"2017"}}},{node:{relativePath:"2017/categories/react/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.react",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/react/zh.md",size:"2507",base:"zh.md",ext:".md",internal:{contentDigest:"edbfd3bca6e6aeb071a37e1bbc22e36a"},fields:{key:"categories.react",language:"zh",markdown:'The {react} library being only the view layer, it creates space for a whole ecosystem that is moving very fast.\n\n{react}库只专注于视图层(view layer), 这在为整个生态圈留下了更多的发展空间同时，自身也能更快速地向前发展。\n\nIn 2016 {create-react-app} solved the problem of how to start coding a React application by providing a nice set of presets, very well packaged. Facebook keeps releasing new versions very often and it was by far the most popular project in 2017 among the React ecosystem.\n\n在2016年{create-react-app}提供了一些优秀的预置和包，解决了初始化React应用时先要进行繁琐复杂的配置问题。今年Facebook也继续保持了频繁更新的节奏，它目前是React生态中最活跃的项目。\n\nAs an example of its success, we could mention [StackBlitz](https://stackblitz.com/), an online IDE that lets you run application created from {create-react-app}, right from the browser, in a few seconds.\n\n作为{create-react-app}的一个成功案例, 我们可以看[StackBlitz](https://stackblitz.com/), 这是一个在线IDE，通过{create-react-app}，让你可以在数秒内从浏览器中创建一个应用。\n\nBut even if {create-react-app} is often considered as the default "starter kit" for React, developers may need more opinionated starter kits: {react-boilerplate} was the most popular project in this category, providing a lot of feature like the GraphQL integration.\n\n即使{create-react-app}已被默认为React的新建工具包，开发者们仍然可以有其它选项，例如{react-boilerplate}。这也是十分受人关注的项目，提供了很多像集成GraphQL的有用功能。\n\n{ant-design}, {ant-design-pro} and {material-ui} are sets of styled React components to help developers create web application with React components, without worrying about the styling.\n\n{ant-design}, {ant-design-pro}和{material-ui}是React组件的样式工具集，它们能帮助程序员在新建应用时而不再担心样式设定方面的问题。\n\n\nAt position number 10, {recompose}\'s popularity denotes one of the features seasoned developers love about React: its "functional" approach, everything is just a function and {recompose} provides a full set of helpers to go further in this direction.\n\n第10名{recompose}的人气值也证明了开发者们喜欢React的原因：它的“函数式”特性，毎件事都是一个函数。{recompose}提供了一全套的函数来帮助你走的更远。\n',year:"2017"}}},{node:{relativePath:"2017/categories/ssg/en.md",size:"928",base:"en.md",ext:".md",internal:{contentDigest:"a603b599b2d3070bd8e7a2de5cd39837"},fields:{key:"categories.ssg",language:"en",markdown:'Static site generators (or "SSG") are tools that generate a bunch of .html, .css and JavaScript files that you can deploy on any web server without the fuss of setting up a database.\nStatic web sites are fast, robust and easy to maintain.\n\nNumber 2 in 2016, {gatsby} gets revenge in 2017. It comes with a lot of great features to optimize your static site:\n\n* Fast browsing & exporting\n* Aggressive preloading\n* Intelligent code splitting (templates + page data)\n\n{gatsby} uses {react} as the view layer and GraphQL to query the content at the building time.\nIt has a strong community and [React official web site](https://reactjs.org) itself is built with Gatsby.\n\n{react-static} is the newcomer in this category.\nIt aims to be a lighter alternative to {gatsby}, with a focus on performance and simplicity, inspired by {create-react-app} project.\n\nIt\'s worth to mention that {nextjs} can also be used as Static Site Generator.\n',year:"2017"}}},{node:{relativePath:"2017/categories/ssg/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.ssg",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/ssg/zh.md",size:"1816",base:"zh.md",ext:".md",internal:{contentDigest:"d09d2483844028915fff50a7f9a82389"},fields:{key:"categories.ssg",language:"zh",markdown:'Static site generators (or "SSG") are tools that generate a bunch of .html, .css and JavaScript files that you can deploy on any web server without the fuss of setting up a database.\n\n静态网站生成器（SSG）是指能够生成一大堆 HTML、CSS、JS 文件，方便你快速部署到简单的 WEB 服务器上而不用安装和配置数据库的工具。\n\nStatic web sites are fast, robust and easy to maintain.\n\n静态网站速度快，稳定且易于维护。\n\nNumber 2 in 2016, {gatsby} gets revenge in 2017. It comes with a lot of great features to optimize your static site:\n\n作为2016年的亚军，{gatsby}今年成功复仇。它带来了许多新的功能来优化你的静态网站。\n\n* Fast browsing & exporting\n* 快速浏览与导出速度\n* Aggressive preloading\n* Aggressive预加载\n* Intelligent code splitting (templates + page data)\n* 智能代码分解(模板 + 网页数据)\n\n{gatsby} uses {react} as the view layer and GraphQL to query the content at the building time.\nIt has a strong community and [React official web site](https://reactjs.org) itself is built with Gatsby.\n\n{gatsby}使用{react}来做视图层(view layer), 构建时候则用GraphQL来查询内容。\n它有一个强大的社区并且[React官方网站](https://reactjs.org)也是用Gatsby的来搭建的.\n\n\n{react-static} is the newcomer in this category.\n\n{react-static}是本类别中的新面孔。\n\nIt aims to be a lighter alternative to {gatsby}, with a focus on performance and simplicity, inspired by {create-react-app} project.\n\n它从{create-react-app}项目中获得了灵感，定位于做一个{gatsby}的轻量替代方案，专注于性能和简洁。\n\nIt\'s worth to mention that {nextjs} can also be used as Static Site Generator.\n\n值得一提的是{nextjs}也能当静态网站生成器来用。\n',year:"2017"}}},{node:{relativePath:"2017/categories/vue/en.md",size:"1175",base:"en.md",ext:".md",internal:{contentDigest:"9b56335ef581e1b00273ad425b5c8627"},fields:{key:"categories.vue",language:"en",markdown:"With the rising popularity of Vue itself, many Vue ecosystem projects also enjoyed rapid growth in 2017.\n\n{element} and {iview} are the two most popular UI component kits, both focused on rapid desktop UI development. {mint-ui} and {vux}, on the other hand, are the two most popular mobile-focused UI kits.\n\n{vuetify} is a Material Design component framework that can be used for both mobile and desktop web apps, and is probably the most feature rich with server-side rendering, PWA and CLI template support. There's also {vue-material which focuses more on providing a set components that strictly adhere to the Material Design spec.\n\n{nuxt} is a higher-level framework built on top of Vue that provides a very smooth development experience for building universal, server-rendering Vue applications. It is also very versatile - you can use the same codebase to ship a normal SPA, or even generate a static site.\n\n{weex} is a framework that allows users to develop native-rendering mobile apps using familiar Vue syntax and API. It is developed by Alibaba and used in production in some of the most heavily used mobile apps in the world, with a strong focus on performance.\n",year:"2017"}}},{node:{relativePath:"2017/categories/vue/zh.md",size:"1175",base:"zh.md",ext:".md",internal:{contentDigest:"9b56335ef581e1b00273ad425b5c8627"},fields:{key:"categories.vue",language:"zh",markdown:"With the rising popularity of Vue itself, many Vue ecosystem projects also enjoyed rapid growth in 2017.\n\n{element} and {iview} are the two most popular UI component kits, both focused on rapid desktop UI development. {mint-ui} and {vux}, on the other hand, are the two most popular mobile-focused UI kits.\n\n{vuetify} is a Material Design component framework that can be used for both mobile and desktop web apps, and is probably the most feature rich with server-side rendering, PWA and CLI template support. There's also {vue-material which focuses more on providing a set components that strictly adhere to the Material Design spec.\n\n{nuxt} is a higher-level framework built on top of Vue that provides a very smooth development experience for building universal, server-rendering Vue applications. It is also very versatile - you can use the same codebase to ship a normal SPA, or even generate a static site.\n\n{weex} is a framework that allows users to develop native-rendering mobile apps using familiar Vue syntax and API. It is developed by Alibaba and used in production in some of the most heavily used mobile apps in the world, with a strong focus on performance.\n",year:"2017"}}},{node:{relativePath:"2017/categories/test-framework/en.md",size:"1256",base:"en.md",ext:".md",internal:{contentDigest:"6e79a045655de6d3fc232f49fbb994a3"},fields:{key:"categories.test-framework",language:"en",markdown:'As we predicted [last year](/2016/en#test-framework) (it\'s the first time we predicted something right!), {jest} became the trendiest testing framework in 2017.\n\nIt was first created by Facebook to run tests for React components, but its evolution has been very fast over the last months (already 22 majors versions released!) and it can be used to write tests for front-end and back-end code.\n\nJest shines because of several points:\n\n* No configuration needed, the defaults settings match the usually needs\n* Great developer experience (intelligent watch mode, very nice error reporting...)\n* Syntax close to {mocha}, a lot of developers are familiar with `describe` and `it` keywords\n* No extra library required to make assertions, it\'s "battery included".\n* Features a unique "snapshot" mode that records automatically the response expected for future tests.\n\n{ava}, number one last year, has still a lot of traction.\n\nIt has been created by [Sindre Sorhus](https://github.com/sindresorhus) who uses it on all his projects... and that means a lot of great projects!\n\nCompared to Jest, it emphasizes on speed by running tests in parallel, it has a smaller footprint and is closer to testing standards, with a syntax close to test frameworks like {tape}.\n',year:"2017"}}},{node:{relativePath:"2017/categories/test-framework/fr.md",size:"1365",base:"fr.md",ext:".md",internal:{contentDigest:"db00fced5f75813986acb84e63fc6056"},fields:{key:"categories.test-framework",language:"fr",markdown:"{jest}, créé par Facebook pour tester leurs applications React, a évolué très vite au cours des derniers mois (plus de 22 versions majeurs sont sorties !) et s'est imposé comme le framework de test le plus populaire en 2017.\n\n{jest} est devenu une solution de test complète qui peut être utilisé aussi bien côté client que côté serveur.\n\nSes points forts:\n\n* Pas de configuration nécessaire\n* Très confortable du point de vue du développeur (Jest détecte les changements sur les fichiers de manière intelligente, les compte-rendus d'exécution sont très lisibles...)\n* Syntaxe similaire à celle de {mocha}, en particulier les mots-clefs `describe` et `it` sont connus de nombreux développeurs.\n* Pas de librairie suppmémentaire pour écrire les tests, tout est inclus dans Jest.\n* Possibilité unique d'enregistrer automatiquement les réponse attendues aux futurs tests ({_snapshots_})\n\n{ava}, le projet numéro 1 l'an dernier, glisse en seconde position cette année.\n\nC'est l'un des innombrables projets de [Sindre Sorhus](https://github.com/sindresorhus) qui l'utilise comme solution de test pour ses propres projets.\n\nPar rapport à Jest, {ava} est une solution plus légère qui privilégie les performances en exécutant les tests in parallèle, et utilise une syntaxe proche de standards utilisés par des solutions telles que {tape}.\n",year:"2017"}}},{node:{relativePath:"2017/categories/test-framework/ja.md",size:"8",base:"ja.md",ext:".md",internal:{contentDigest:"8dc19198fb168d8d962acb007311a95d"},fields:{key:"categories.test-framework",language:"ja",markdown:"(Empty)\n",year:"2017"}}},{node:{relativePath:"2017/categories/test-framework/zh.md",size:"2359",base:"zh.md",ext:".md",internal:{contentDigest:"591cfdabd213f12cbb7234da7e524729"},fields:{key:"categories.test-framework",language:"zh",markdown:'As we predicted [last year](/2016/en#test-framework) (it\'s the first time we predicted something right!), {jest} became the trendiest testing framework in 2017.\n\n正如我们[去年](/2016/en#test-framework)预计的一样 (这是我们第一次预测成功!), {jest}成为了今年测试框架类别里最强王者。\n\nIt was first created by Facebook to run tests for React components, but its evolution has been very fast over the last months (already 22 majors versions released!) and it can be used to write tests for front-end and back-end code.\n\n它最初是被Facebook用来测试React组建的目的而开发的，但最近几个月革命性地变更（发布了22个大版本）使得它现在能用于测试前端与后端的代码。\n\nJest shines because of several points:\n\nJest有几个大的闪光点：\n\n* No configuration needed, the defaults settings match the usually needs\n* 无需配置, 默认地设定已经满足通常需求\n* Great developer experience (intelligent watch mode, very nice error reporting...)\n* 强大的开发者体验 (智能观察模式, 直观的错误报告...)\n* Syntax close to {mocha}, a lot of developers are familiar with `describe` and `it` keywords\n* 语法上与{mocha}很接近, 许多程序员熟悉`describe` 和 `it` 这样的关键词\n* No extra library required to make assertions, it\'s "battery included".\n* 不需要额外库来创建assertions, 已全部内置其中。\n* Features a unique "snapshot" mode that records automatically the response expected for future tests.\n* 独特的"快照"模式可以自动地记录返回的界面。\n\n{ava}, number one last year, has still a lot of traction.\n\n{ava}, 去年的第一名，仍然有许多吸引人的特点。\n\nIt has been created by [Sindre Sorhus](https://github.com/sindresorhus) who uses it on all his projects... and that means a lot of great projects!\n\n它有[Sindre Sorhus](https://github.com/sindresorhus)创建，并且在他所有的项目中使用……这意味着非常多伟大的项目！\n\nCompared to Jest, it emphasizes on speed by running tests in parallel, it has a smaller footprint and is closer to testing standards, with a syntax close to test frameworks like {tape}.\n\n相较于Jest，ava更强调在并行测试方面上的速度，它也越来越像是一种测试标准，语法上与测试框架{tape}十分相近。\n',year:"2017"}}}]}},pathContext:{language:"zh",year:2017}}}});
//# sourceMappingURL=path---2017-zh-754c63a17ed0a516775c.js.map